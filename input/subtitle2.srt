1
00:00:03,620 --> 00:00:08,540
Yeah, thanks for having us. Don't worry.
I'm not sick. I got you understood.

2
00:00:35,180 --> 00:02:03,240
Uh, how's everybody doing today?

3
00:02:05,580 --> 00:02:15,070
Sounds great. Just seriously. Uh, you can
go around the room and just ask,

4
00:02:15,330 --> 00:02:20,790
like, uh, the questions we've seen here by
like, uh, did you work a job last

5
00:02:20,790 --> 00:02:27,790
summer and it's a what
was it, uh, what was that?

6
00:02:27,990 --> 00:02:33,450
Like, look, like, where was
it? Virtual online and person.

7
00:02:34,950 --> 00:02:42,370
Cool. Uh, Anthony,
uh, my analytics, analytics.

8
00:02:44,960 --> 00:02:51,440
Okay. Is the my analyst thing is
in person job. Yeah. All right. Uh,

9
00:02:56,110 --> 00:03:01,090
yeah. What is your first name? Colleen.
Colleen. What, uh, what did you do this

10
00:03:01,090 --> 00:03:08,050
past summer in terms of job
here in the beach or back home?

11
00:03:08,830 --> 00:03:16,550
And what's your name? Adrian radius. Yeah.
All right. Uh, what did you do?

12
00:03:16,550 --> 00:03:23,610
I left in the hotel. Okay. Will you
did a remote work for a tax company?

13
00:03:24,690 --> 00:03:28,770
Was it cool? Yeah. It was nice. Awesome.

14
00:03:30,870 --> 00:03:34,590
What, uh, what kind of environment is
it primarily? And like,

15
00:03:34,590 --> 00:03:35,870
what was the framework

16
00:03:35,870 --> 00:03:38,850
or whatever? Uh, it
was an individual studio

17
00:03:38,850 --> 00:03:42,090
and they did a C sharp. I see.

18
00:03:42,230 --> 00:03:44,530
So the classes you had
here probably helped some for that.

19
00:03:44,530 --> 00:03:51,470
I guess a three 30 with
Cox almost exactly like it. Awesome.

20
00:03:53,610 --> 00:04:01,350
I'm really going to try and
get better. What is your name? Okay.

21
00:04:02,590 --> 00:04:03,190
What did you do?

22
00:04:04,430 --> 00:04:09,830
Okay. Is that, is that the place
that we have that

23
00:04:09,830 --> 00:04:11,490
relationship with with the

24
00:04:11,810 --> 00:04:15,650
college of human performance
business and all that?

25
00:04:16,130 --> 00:04:17,550
Was it good?

26
00:04:31,060 --> 00:04:35,300
I can't hear you. Well,
dog room. What was that like?

27
00:04:39,260 --> 00:04:42,420
Well, I was a high school teacher, but
she was saying like, I'll be a dog

28
00:04:42,420 --> 00:04:43,440
grammar. I'm like, okay.

29
00:04:44,900 --> 00:04:46,380
That sounds, that sounds cool.

30
00:04:49,050 --> 00:04:50,490
I'm thinking though,
that like these aspects

31
00:04:50,490 --> 00:04:51,990
of it, just like any job, there's

32
00:04:51,990 --> 00:04:53,430
going to be good things and bad things.

33
00:04:55,770 --> 00:04:58,750
But yeah, I see that. Was it
like a thing where

34
00:04:58,750 --> 00:04:59,650
people would like schedule

35
00:04:59,650 --> 00:05:02,450
it alone advanced or they
would just bring in like walk-ins?

36
00:05:03,770 --> 00:05:04,790
Let's see.

37
00:05:07,990 --> 00:05:10,570
I just want to get a
car wash. Car wash. All right.

38
00:05:12,510 --> 00:05:14,350
Next student. What did you do?

39
00:05:14,350 --> 00:05:18,960
What about over here?

40
00:05:23,840 --> 00:05:27,280
How was that?

41
00:05:30,980 --> 00:05:31,640
Pretty slow.

42
00:05:32,000 --> 00:05:39,000
It's pretty slow because
I don't have to wait.

43
00:05:39,960 --> 00:05:41,580
Basically.

44
00:05:42,620 --> 00:05:45,900
Some days.

45
00:05:46,460 --> 00:05:47,500
Like two days.

46
00:05:52,300 --> 00:05:55,100
So they didn't have like a test
server versus a

47
00:05:55,100 --> 00:05:56,620
production server that they

48
00:05:56,620 --> 00:05:59,400
would stage at first to test
to see what happened or what.

49
00:06:01,860 --> 00:06:06,440
I could, I could test on my
own, but it was hard to do that.

50
00:06:06,860 --> 00:06:09,720
I had to work with like two databases.

51
00:06:16,020 --> 00:06:26,460
The one version of my machine was like my
S3 on the end and in production it was

52
00:06:26,460 --> 00:06:27,060
EB2.

53
00:06:28,160 --> 00:06:31,500
So what we were doing on my
machine and you know, I'd be like, okay,

54
00:06:31,700 --> 00:06:34,740
there's just too many issues and
we'll work on the EB2 in production.

55
00:06:35,480 --> 00:06:38,000
That's cool.

56
00:06:38,340 --> 00:06:39,380
What about you?

57
00:06:41,420 --> 00:06:41,800
Yes, sir.

58
00:06:41,800 --> 00:06:42,860
Where it is.

59
00:06:43,120 --> 00:06:50,510
It's cool, man.

60
00:06:50,950 --> 00:06:54,210
That was your second summer.

61
00:06:56,610 --> 00:06:57,910
Okay, that's really cool.

62
00:06:58,910 --> 00:06:59,970
So I gotta say

63
00:06:59,970 --> 00:07:04,610
between last time we were in here and
this time I met with one of the division

64
00:07:04,610 --> 00:07:10,170
leaders there about the idea of like,
hey, you know, we've got some folks that

65
00:07:10,170 --> 00:07:11,650
are like finding positions here.

66
00:07:11,770 --> 00:07:16,070
It was already like I'd love for them
to like do like, come on campus to

67
00:07:16,070 --> 00:07:19,170
recruiting because they're only three
and a half hours away.

68
00:07:20,370 --> 00:07:21,990
And so they were, they're super minimal.

69
00:07:22,190 --> 00:07:24,690
See, I didn't like coming out
to career fair and all this stuff.

70
00:07:24,850 --> 00:07:26,190
So I'm hoping that
we get them actually here.

71
00:07:26,870 --> 00:07:29,330
I know you've already got something
lined up with them anyway, but I'm

72
00:07:29,330 --> 00:07:33,590
thinking like the rest of our students
like to learn more about what the

73
00:07:33,590 --> 00:07:35,690
opportunities are, you know,
like this sort of stuff.

74
00:07:35,890 --> 00:07:37,070
I think, how many of you
know, like know

75
00:07:37,070 --> 00:07:38,090
what Savannah River National

76
00:07:38,090 --> 00:07:40,570
Lab is or Savannah River Site is?

77
00:07:42,450 --> 00:07:44,750
So I mean, it's like, yeah.

78
00:07:46,370 --> 00:07:48,250
They were talking about that this year.

79
00:07:48,690 --> 00:07:49,590
I didn't get to figure out.

80
00:07:50,090 --> 00:07:51,630
There's already this
hospital there's going

81
00:07:51,630 --> 00:07:53,850
to be like, USB clubs and

82
00:07:53,850 --> 00:07:55,110
going to take orders.

83
00:07:55,890 --> 00:07:57,970
And I know the main
focus schools, you know, the U.S.

84
00:07:58,050 --> 00:07:59,170
can make a difference right there.

85
00:08:00,230 --> 00:08:02,390
Of course, of all the
women there, I know these persons.

86
00:08:04,750 --> 00:08:06,310
And I hope people even form by Canada.

87
00:08:06,950 --> 00:08:07,190
Yeah.

88
00:08:07,910 --> 00:08:08,170
Yeah.

89
00:08:08,230 --> 00:08:11,930
I feel like given our proximity to
them, that there should be like more

90
00:08:11,930 --> 00:08:16,270
because of the growth that they're
going to probably experience over the

91
00:08:16,270 --> 00:08:19,730
next five to seven years is
going to necessitate a bigger workforce.

92
00:08:20,090 --> 00:08:23,030
So I'm thinking Coastal might as
well be a player in that, right?

93
00:08:23,490 --> 00:08:25,410
Getting our students having
cool jobs there and stuff.

94
00:08:25,750 --> 00:08:26,410
Yeah, there should be.

95
00:08:26,630 --> 00:08:29,190
I don't know who's in, we
haven't hired them in the same time.

96
00:08:30,450 --> 00:08:34,590
Yeah, I mean, it's going
to be a huge change, right?

97
00:08:34,810 --> 00:08:38,130
I mean, you know, they have
that data center that they're going to

98
00:08:38,130 --> 00:08:40,610
build there, which is, think about it.

99
00:08:40,810 --> 00:08:45,670
That's one of the only five sites
that the Department of Energy or the

100
00:08:45,950 --> 00:08:48,010
building a data
center on federal property.

101
00:08:48,970 --> 00:08:52,690
And number two, the production that
they're going to be trying to

102
00:08:52,690 --> 00:08:53,190
ramp up there.

103
00:08:53,330 --> 00:08:56,270
That's going to be a gigantic
effort and that's going to necessitate

104
00:08:56,270 --> 00:08:59,670
like probably these huge numbers that
he's talking about to be hired.

105
00:09:01,390 --> 00:09:04,230
I mean, those kind of numbers would make
it be up there at the top of some

106
00:09:04,230 --> 00:09:05,870
of the biggest national
labs in our country.

107
00:09:06,130 --> 00:09:09,230
So there's a lot of growth here
if you wanted to stay in this area.

108
00:09:10,210 --> 00:09:14,290
One of our students that graduated a
year ago, he just got a full-time job

109
00:09:14,290 --> 00:09:16,070
there is like an N.L. engineer.

110
00:09:19,130 --> 00:09:21,530
And he just sent her new solutions.

111
00:09:22,650 --> 00:09:24,690
He's loving it, you know.

112
00:09:27,990 --> 00:09:28,370
What's that?

113
00:09:32,030 --> 00:09:33,370
Okay, well, there's two people now.

114
00:09:33,850 --> 00:09:35,370
I'm thinking about a G.E.S. laws.

115
00:09:35,670 --> 00:09:36,250
Do you remember him?

116
00:09:37,230 --> 00:09:37,930
A G.E. got there.

117
00:09:38,210 --> 00:09:39,470
What is Avion doing?

118
00:09:43,970 --> 00:09:44,730
I know you're working on it.

119
00:09:45,290 --> 00:09:45,790
Okay.

120
00:09:46,210 --> 00:09:48,130
I mean, I don't know.

121
00:09:48,230 --> 00:09:51,250
To me, it's a cool connection
that we should be trying to exploit.

122
00:09:52,070 --> 00:09:54,130
Cool summer.

123
00:09:55,030 --> 00:09:55,550
What about you?

124
00:09:59,860 --> 00:10:20,860
I got you.

125
00:10:21,080 --> 00:10:24,720
Work here or are they not really
doing that as much as they used to?

126
00:10:25,620 --> 00:10:30,120
I know that they've, you know, hired
some before, but it's not clear to me,

127
00:10:30,120 --> 00:10:32,680
like, obviously, there's not
enough position for everybody.

128
00:10:33,480 --> 00:10:34,260
What about you?

129
00:10:35,300 --> 00:10:37,760
Yes, I did work with
both of you over the summer.

130
00:10:39,960 --> 00:10:42,220
Okay.

131
00:10:42,500 --> 00:10:43,080
Yeah, yeah, yeah, yeah.

132
00:10:43,200 --> 00:10:45,540
I've been seeing the posts
about that and traveling and stuff.

133
00:10:45,620 --> 00:10:46,200
That looks cool.

134
00:10:47,960 --> 00:10:48,600
What about you?

135
00:10:55,790 --> 00:10:56,610
Graduating this semester?

136
00:10:57,190 --> 00:11:01,030
Mike, what about you?

137
00:11:04,040 --> 00:11:05,300
Oh, you weren't here for the question.

138
00:11:06,140 --> 00:11:07,360
What did you do this past summer?

139
00:11:07,600 --> 00:11:08,600
And where did you do it?

140
00:11:09,800 --> 00:11:11,800
Yeah, I worked at
a local data analytics company.

141
00:11:12,120 --> 00:11:12,860
What's it called?

142
00:11:13,220 --> 00:11:13,640
My analyst.

143
00:11:13,960 --> 00:11:15,840
Oh, so that's the same
one that Anthony works on?

144
00:11:17,260 --> 00:11:17,640
Oh, okay.

145
00:11:18,760 --> 00:11:19,800
Was that your first time there?

146
00:11:21,760 --> 00:11:22,120
Cool.

147
00:11:22,500 --> 00:11:22,860
All right.

148
00:11:23,040 --> 00:11:25,560
I just wanted to kind of get a sense
of who else doing what,

149
00:11:25,780 --> 00:11:27,740
you know, this past summer.

150
00:11:32,070 --> 00:11:35,210
So, yeah, you know, as
the semester goes on, I

151
00:11:35,210 --> 00:11:38,170
mean, you know, if you
want to talk about, like, you

152
00:11:38,170 --> 00:11:40,430
know, some of the opportunities
that are at places like

153
00:11:40,430 --> 00:11:44,010
SR now and SRS and
Los Alamos and Argonne and Oak

154
00:11:44,010 --> 00:11:47,570
Ridge and T and the Nell and all the other
19 other sites that there

155
00:11:47,570 --> 00:11:51,490
are, there's, there's, you're not stuck
to a particular geographic location

156
00:11:51,490 --> 00:11:54,890
and you're a U.S. citizen
and there's a lot of

157
00:11:54,890 --> 00:11:56,470
opportunity at some of these places.

158
00:11:56,530 --> 00:11:58,790
Some that doesn't
require citizenship maybe

159
00:11:58,790 --> 00:12:02,050
requires permanent residence
or green card status.

160
00:12:02,270 --> 00:12:05,050
But like, you know, generally some of the
ones that are more

161
00:12:05,050 --> 00:12:06,910
of national security require citizenship.

162
00:12:07,370 --> 00:12:10,770
But, you know, 90% of students
that come to Coastal are U.S. citizens.

163
00:12:11,010 --> 00:12:14,030
So, like, that's a
free, you know, rich, fake

164
00:12:14,030 --> 00:12:16,750
demographic of folks because
if you look at some

165
00:12:16,750 --> 00:12:19,250
of these other schools,
especially in the graduate program,

166
00:12:19,610 --> 00:12:23,930
I mean, U.S. citizenship is
very, very low, super low.

167
00:12:24,170 --> 00:12:27,870
Like, I mean, I bet
right now Carnegie Mellon, there's less

168
00:12:27,870 --> 00:12:30,950
than 1% of their graduate students
in computing that are U.S. citizens.

169
00:12:31,410 --> 00:12:38,910
So, that's a big sector of the job market
that, that, you know, kind

170
00:12:38,910 --> 00:12:39,950
of narrows things down, right?

171
00:12:40,070 --> 00:12:41,350
I mean, so that's something we want to do.

172
00:12:42,090 --> 00:12:44,750
Let me know and we can try to
talk about how to look those things up.

173
00:12:46,110 --> 00:12:51,170
So, what the log in here to access EI and
show you what I see when I look at this.

174
00:12:55,540 --> 00:13:02,340
So, let's see here, we got the
two-factor authentication mass,

175
00:13:02,880 --> 00:13:03,800
which hopefully will work.

176
00:13:10,700 --> 00:13:14,340
Oh, I got my phone silence, so
it doesn't want to pop up there.

177
00:13:17,100 --> 00:13:23,580
Let's see, Duo, Prove.

178
00:13:26,900 --> 00:13:27,980
Oh, and that's not up there.

179
00:13:28,360 --> 00:13:28,840
Okay, here we go.

180
00:13:29,880 --> 00:13:32,060
Sorry, I thought it was, I
thought that the screen was up there.

181
00:13:32,580 --> 00:13:32,940
There we go.

182
00:13:33,240 --> 00:13:41,220
So, log in here to the
allocations that we have on the platform.

183
00:13:43,420 --> 00:13:51,890
And so, we have this
allocation of resources to the 2026.

184
00:13:52,230 --> 00:13:54,290
So, get us through
this academic school year

185
00:13:54,290 --> 00:14:00,470
that we've got, you
know, 100,000 credits available.

186
00:14:02,270 --> 00:14:08,230
We've got 48,000 credits on
the San Diego Superimputing Center.

187
00:14:09,350 --> 00:14:12,350
Superimputing are called Expanse, which is
the name of the fifth year.

188
00:14:13,510 --> 00:14:16,310
And then we've got some
storage or whatever as well.

189
00:14:17,610 --> 00:14:22,050
And then you've got, you know,
our students here that are here.

190
00:14:22,250 --> 00:14:22,990
So, come over here.

191
00:14:23,590 --> 00:14:25,270
These are the people that
are currently in the system.

192
00:14:25,510 --> 00:14:27,510
So, I think, you know, I've tried to add
as many of you

193
00:14:27,510 --> 00:14:29,290
guys who've written your stuff,

194
00:14:29,430 --> 00:14:31,690
add them to the list here.

195
00:14:33,250 --> 00:14:35,590
And typically, there's about
a 24-hour lag between

196
00:14:35,590 --> 00:14:39,110
the time that you, well, let me be clear.

197
00:14:39,550 --> 00:14:42,290
The time that I read your email
and I interview you into this thing.

198
00:14:42,410 --> 00:14:45,530
So, after you make an account, but
after I add you to this thing,

199
00:14:45,530 --> 00:14:49,150
it might be about 24 hours after
that that you can then use the system.

200
00:14:49,430 --> 00:14:53,950
It's not instantaneous for
whatever reason, because that

201
00:14:53,950 --> 00:14:55,590
just seems to be the way it is.

202
00:15:00,010 --> 00:15:04,950
So, anyway, I want to talk about
this, the resource we have access to.

203
00:15:05,030 --> 00:15:08,810
The only thing about access CI is
the thing that, you

204
00:15:08,810 --> 00:15:11,190
know, brings together allocations

205
00:15:11,190 --> 00:15:13,530
on lots of different
supercomputers across the nation.

206
00:15:13,770 --> 00:15:15,910
We've historically, Coastal always
worked with San Diego.

207
00:15:17,470 --> 00:15:18,590
There's no reason for that.

208
00:15:18,690 --> 00:15:21,010
It was one of the first places that had,
like, a bunch of free

209
00:15:21,010 --> 00:15:22,090
credits that we could use.

210
00:15:22,450 --> 00:15:24,750
And we just keep pumping
them for resources every year.

211
00:15:24,750 --> 00:15:27,050
So, my thought is, like, why
change something if this is work?

212
00:15:27,550 --> 00:15:32,630
So, I want you to take a look, we go over
to Google, and we type

213
00:15:32,630 --> 00:15:35,710
in the San Diego Supercomputing Center,

214
00:15:36,010 --> 00:15:38,690
Expanse User Guide.

215
00:15:41,410 --> 00:15:44,830
So, that's the, Expanse is the name of the
supercomputer there that we're

216
00:15:44,830 --> 00:15:45,410
going to be dealing with.

217
00:15:45,530 --> 00:15:48,630
They're writing our parallel jobs on and
running it and all this sort of stuff.

218
00:15:49,390 --> 00:15:54,750
But it'll bring up this user guide here.

219
00:15:56,770 --> 00:15:58,450
And when you come in
here, and I see the format

220
00:15:58,450 --> 00:16:00,330
has changed here a little bit
from what it used to be.

221
00:16:00,630 --> 00:16:02,310
You kind of read a
little bit about what it is.

222
00:16:03,490 --> 00:16:06,090
You know, it's a Dell supercomputer.

223
00:16:06,530 --> 00:16:09,270
It's got 5.16 petaflops.

224
00:16:11,250 --> 00:16:19,360
So, it's got, let's see, the compute
nodes by these processors, this much RAM,

225
00:16:20,360 --> 00:16:22,580
these Nvidia cards, you kind
of get like a list

226
00:16:22,580 --> 00:16:25,400
of all of this stuff
and how it works or whatever.

227
00:16:26,100 --> 00:16:30,120
So, it's got 728 nodes in it,
each of which has this in it.

228
00:16:30,300 --> 00:16:34,960
So, two sockets,
128 cores per motherboard.

229
00:16:38,110 --> 00:16:40,950
You know, not a huge amount
of RAM, but, you know, decent.

230
00:16:43,210 --> 00:16:49,410
It's got a local SSD
card that's NDME PCIe SSD device,

231
00:16:49,410 --> 00:16:53,330
which means you got really fast read
and write speeds locally on the node.

232
00:16:53,630 --> 00:16:56,470
But that's not really
where your data stuff lies.

233
00:16:56,730 --> 00:16:58,970
Like that would be like a
temporary place you could put some stuff.

234
00:17:00,730 --> 00:17:08,410
The GPU nodes, 52 of these Nvidia V100
CPUs that are in the Xeon and Intel.

235
00:17:10,150 --> 00:17:13,590
And then there are some
large memory machines like, for example,

236
00:17:14,330 --> 00:17:17,790
it has four nodes that each
of which have two terabytes of RAM.

237
00:17:17,790 --> 00:17:20,470
So, those are called
your large shared memory nodes.

238
00:17:21,190 --> 00:17:22,630
But we're probably not
going to mess with those.

239
00:17:22,910 --> 00:17:25,110
As you can see, there's
not very many of those.

240
00:17:25,390 --> 00:17:28,410
So, we don't need to play with
that to do the stuff we're doing.

241
00:17:31,230 --> 00:17:39,450
The network that it
has is pretty fast here.

242
00:17:39,710 --> 00:17:41,490
It's high data
rate, infinite band, interconnect.

243
00:17:41,790 --> 00:17:43,890
So, this is that thing I was
talking about, super high

244
00:17:43,890 --> 00:17:45,470
bandwidth, super low latency.

245
00:17:46,610 --> 00:17:51,670
The network, you know,
2.5 terabytes a second.

246
00:17:51,890 --> 00:17:53,750
I mean, that's a lot.

247
00:17:55,110 --> 00:17:58,610
It uses network file system and Seth.

248
00:17:59,250 --> 00:18:01,090
It's got 12 petabyte local storage.

249
00:18:02,150 --> 00:18:02,870
That's a lot.

250
00:18:04,810 --> 00:18:06,690
And it's running Linux.

251
00:18:09,030 --> 00:18:12,390
And you can come down in here and read
about what you've got to do to access it

252
00:18:12,390 --> 00:18:13,390
and all this sort of stuff.

253
00:18:15,210 --> 00:18:17,230
This is going to be
your go-to guide when you

254
00:18:17,230 --> 00:18:19,290
can't figure out how to
do something on this machine.

255
00:18:19,590 --> 00:18:21,370
Like, this will be kind
of the place to look.

256
00:18:21,890 --> 00:18:23,970
There's a lot here. You can
see the way the scroll art is.

257
00:18:24,090 --> 00:18:25,910
There's a lot of stuff here.

258
00:18:26,930 --> 00:18:32,010
But if you look at the
top, we should have, let's see.

259
00:18:32,410 --> 00:18:34,130
Let's do a control F for the word portal.

260
00:18:36,350 --> 00:18:37,310
The exchange user portal.

261
00:18:37,690 --> 00:18:39,950
So, I'm going to go in. Let's
see. Open this in a new tab.

262
00:18:53,350 --> 00:18:55,790
All right. So, let's
see what we've got here.

263
00:18:55,990 --> 00:18:57,670
Just wanted to look up our organization.

264
00:18:59,810 --> 00:19:01,670
Now, let's see if it's got access.

265
00:19:02,010 --> 00:19:04,010
A-C-C-E-X-S-E-I.

266
00:19:04,390 --> 00:19:09,370
So, the way we, when I asked you
to use method two to create an account,

267
00:19:09,470 --> 00:19:11,090
that means it wasn't
tied to, like, Coastal.

268
00:19:11,370 --> 00:19:12,470
It wasn't tied to anything.

269
00:19:12,950 --> 00:19:15,670
It was tied to your Coastal email address,
but it wasn't tied

270
00:19:15,670 --> 00:19:17,530
to Coastal's authentication system.

271
00:19:18,850 --> 00:19:20,810
Not that, maybe that works nowadays.

272
00:19:20,810 --> 00:19:25,830
Historically, I found that, like, that
federated authentication with

273
00:19:25,830 --> 00:19:26,610
Coastal didn't work,

274
00:19:26,730 --> 00:19:31,210
because Coastal didn't have some stuff set
up, exactly correct, to make that happen.

275
00:19:31,650 --> 00:19:33,150
So, that's why I said use method two.

276
00:19:33,870 --> 00:19:36,930
Method two means I don't have it
associated with anybody other

277
00:19:36,930 --> 00:19:38,970
than the access people.

278
00:19:39,430 --> 00:19:41,430
All right. So, let's try
this and see what happens.

279
00:19:41,550 --> 00:19:42,410
I don't know if this
is even going to work.

280
00:19:43,150 --> 00:19:46,150
I haven't tried it since a year
ago when I was teaching this class.

281
00:19:51,760 --> 00:19:54,580
And, of course,
accessing Expanse won't work

282
00:19:54,580 --> 00:19:57,020
until I've added you to the thing, right?

283
00:19:57,060 --> 00:20:00,400
Even if you've got the
Access CI login, what you send

284
00:20:00,400 --> 00:20:03,400
it to me, I add it
to the system 24 hours later,

285
00:20:03,600 --> 00:20:05,180
then you'd be able to get into the system.

286
00:20:05,440 --> 00:20:09,640
And it appears to be that
we're, you know, in the system here.

287
00:20:09,720 --> 00:20:11,200
Our login is wmjones.

288
00:20:11,300 --> 00:20:14,640
That's my, that's my user ID on Access CI.

289
00:20:15,540 --> 00:20:19,120
And you can kind of see there's
a number of things that you could do.

290
00:20:19,120 --> 00:20:20,960
For example, I didn't open up a shell.

291
00:20:22,360 --> 00:20:26,320
You know, I can go over
here and look around in here.

292
00:20:26,560 --> 00:20:30,600
I can open up my file system over
there and push things

293
00:20:30,600 --> 00:20:31,920
up there, pull things down,

294
00:20:31,940 --> 00:20:35,440
rather than having to use some
other methods that are for loading files,

295
00:20:36,100 --> 00:20:39,520
like using what's called Globus, which
is kind of a thing like,

296
00:20:39,740 --> 00:20:43,980
I can kind of imagine it
as being this really fancy FTP-type thing,

297
00:20:44,560 --> 00:20:45,720
but with all kinds of security.

298
00:20:45,720 --> 00:20:47,780
You can actually just open it up in
your browser and push

299
00:20:47,780 --> 00:20:48,840
and pull things down,

300
00:20:48,960 --> 00:20:49,960
you know, from your web browser.

301
00:20:51,400 --> 00:20:53,840
But eventually, you know,
you'll come over to,

302
00:20:54,100 --> 00:20:56,060
you know, be able to open up a shell,

303
00:20:56,520 --> 00:20:59,120
you know, and right now
we're almost called the login node.

304
00:21:00,260 --> 00:21:01,240
This is really critical.

305
00:21:01,480 --> 00:21:04,380
Okay, I want to make sure
I, make sure I explain this.

306
00:21:05,620 --> 00:21:09,780
I think they have maybe four login nodes,
and depending on how loaded each one is,

307
00:21:10,220 --> 00:21:13,780
it will automatically forge you to
a particular one of those nodes, right?

308
00:21:16,760 --> 00:21:21,460
If you think about, like, once
you think about this is the supercomputer

309
00:21:21,460 --> 00:21:26,040
that we have access to, these
login nodes, like login is zero one,

310
00:21:26,320 --> 00:21:27,700
login is zero two, da da da.

311
00:21:28,220 --> 00:21:30,920
You log in from the
outside world into one of these,

312
00:21:31,140 --> 00:21:34,400
but you do not run anything on those.

313
00:21:35,760 --> 00:21:40,720
You don't run anything on
that, because if you do,

314
00:21:41,840 --> 00:21:45,900
they're going to come in here and they're
going to lock you out of the system.

315
00:21:46,060 --> 00:21:46,560
Here's why.

316
00:21:47,720 --> 00:21:50,800
How many people do you think are
actually logged into this thing right now?

317
00:21:52,480 --> 00:21:54,860
If you're going to go and run a
program, it's going to

318
00:21:54,860 --> 00:21:56,160
take 25 minutes to run,

319
00:21:56,300 --> 00:21:57,420
it's going to hog up the CPUs.

320
00:21:58,580 --> 00:22:00,420
Does that sound like a good idea
that it's a shared

321
00:22:00,420 --> 00:22:01,620
system, what everybody else?

322
00:22:02,540 --> 00:22:02,780
I don't know.

323
00:22:03,460 --> 00:22:05,100
So let's see how many
people there are on this thing.

324
00:22:05,940 --> 00:22:07,200
So we're going to do a who there.

325
00:22:07,200 --> 00:22:10,000
So let's see, pipes,
word count, that shell.

326
00:22:11,020 --> 00:22:12,720
So 128 people will log in right now.

327
00:22:12,900 --> 00:22:15,980
If we were to run something
really computationally expensive

328
00:22:15,980 --> 00:22:16,920
on this node,

329
00:22:17,080 --> 00:22:19,240
that possibly screws up
their ability to even

330
00:22:19,240 --> 00:22:21,540
just be sitting there
doing little basic commands, right?

331
00:22:22,080 --> 00:22:24,420
You do that enough,
they will lock you out.

332
00:22:24,560 --> 00:22:27,060
And there isn't anything
I can do about it.

333
00:22:27,600 --> 00:22:29,840
That's violating their
terms and conditions.

334
00:22:30,580 --> 00:22:33,080
Now, does that mean if you run, like,
a little Hello World

335
00:22:33,080 --> 00:22:34,100
program, that's a problem?

336
00:22:34,400 --> 00:22:35,640
No, it's not a problem.

337
00:22:36,680 --> 00:22:38,860
But if you hit enter
and it doesn't more or

338
00:22:38,860 --> 00:22:42,500
less come back in two
or three seconds, that's too long.

339
00:22:43,160 --> 00:22:45,060
Especially if you're talking about
on the order of minutes.

340
00:22:46,760 --> 00:22:49,580
They have a little thing that monitors
how long everybody's

341
00:22:49,580 --> 00:22:50,740
process has been running

342
00:22:50,740 --> 00:22:53,080
and how much CPU
has been consumed and they

343
00:22:53,080 --> 00:22:55,080
get a little report
and a little notification send.

344
00:22:55,580 --> 00:22:57,520
Depending on how egregious it is, the
human being gets involved

345
00:22:57,520 --> 00:22:58,500
or gets too egregious

346
00:22:58,500 --> 00:22:59,460
and they're shooting the dead.

347
00:22:59,720 --> 00:23:02,240
They just go and kill it and just kill it
and lock the account up,

348
00:23:02,340 --> 00:23:03,300
you know, that's what you do.

349
00:23:04,180 --> 00:23:06,100
So this is, like,
what would be considered a

350
00:23:06,100 --> 00:23:07,980
login note where we
could do some basic stuff.

351
00:23:08,100 --> 00:23:09,940
You know, we can come in there
and see, like, what's in our directory.

352
00:23:12,870 --> 00:23:16,630
We can run some compilers, like, we
can then run, like, our GCC compiler.

353
00:23:16,810 --> 00:23:18,610
We can do some
basic little things in here.

354
00:23:19,030 --> 00:23:21,290
But when we go to
get ready to actually run

355
00:23:21,290 --> 00:23:24,890
one of the programs, it's
going to take a long time,

356
00:23:25,610 --> 00:23:29,870
then we're going to need
to go and figure out

357
00:23:29,870 --> 00:23:32,970
how do we submit jobs
to run in SLURM, okay?

358
00:23:32,970 --> 00:23:34,710
And right now, we're not
going to worry about that.

359
00:23:35,490 --> 00:23:37,490
And not everybody even has
accounts in this thing yet.

360
00:23:37,650 --> 00:23:40,810
But that's why I'm telling you that it's
important to go in and get this account

361
00:23:40,810 --> 00:23:45,250
because we need to just get
our feet wet, even accessing the computer,

362
00:23:45,290 --> 00:23:47,690
much less trying to run
a real program and do something.

363
00:23:48,170 --> 00:23:51,750
Just logging in and getting all the pieces
of parts is going to take a bit, okay?

364
00:23:51,890 --> 00:23:55,590
So please, if you haven't
already gotten me that, please

365
00:23:55,590 --> 00:23:57,330
get it to me by the end of the day today.

366
00:23:57,510 --> 00:24:00,870
And I know that not everybody's got
it because I haven't gotten enough emails

367
00:24:00,870 --> 00:24:02,810
if they're equal to the
number of people within the class.

368
00:24:03,090 --> 00:24:05,010
So that's, you know, I
know we've got a problem.

369
00:24:06,750 --> 00:24:09,050
I'd rather, the first
time we play with it,

370
00:24:09,150 --> 00:24:11,330
that everybody be able to follow
along and, like,

371
00:24:11,610 --> 00:24:12,970
actually see what's happening

372
00:24:12,970 --> 00:24:14,370
if you want to
bring your laptop or whatever.

373
00:24:14,610 --> 00:24:16,290
Remember, these things
are being recorded, and

374
00:24:16,290 --> 00:24:18,050
did anybody check to see whether or not

375
00:24:18,050 --> 00:24:20,370
you could actually see the
YouTube videos from the first class?

376
00:24:20,750 --> 00:24:22,210
It worked. All right, cool.

377
00:24:22,350 --> 00:24:25,790
So I'm also going to try to have
it where I have a summary for everyone,

378
00:24:26,030 --> 00:24:28,870
so it's easy to figure out, like,
what do we talk about there each time?

379
00:24:28,870 --> 00:24:33,250
But also inside of YouTube, you
know, it does have the transcripts,

380
00:24:33,510 --> 00:24:36,530
so take that, do a
summary, post it on our page,

381
00:24:36,950 --> 00:24:39,130
and then you can go back and figure out
which one to switch,

382
00:24:39,290 --> 00:24:40,610
and that sort of thing.

383
00:24:41,690 --> 00:24:44,130
All right, so let's get back to the book.

384
00:24:45,010 --> 00:24:51,970
All right, now, I put,
like, a version of the repo.

385
00:24:52,270 --> 00:24:56,610
I put it on inside
the file directory on Moodle,

386
00:24:56,730 --> 00:24:59,970
so you can download source
code, you can download the slides.

387
00:25:01,050 --> 00:25:05,810
Late yesterday, I got a set of
updated slides that

388
00:25:05,810 --> 00:25:08,050
were from Professor Hickman,

389
00:25:08,250 --> 00:25:14,030
Megan Hickman, that she taught 473
last semester when I wasn't here,

390
00:25:14,250 --> 00:25:17,790
and she made some cool improvements to
them, and she handed them to me.

391
00:25:18,030 --> 00:25:22,190
Now, I tried to upload this thing,
it was only 670 megabytes this morning,

392
00:25:22,350 --> 00:25:24,970
and it sat there forever. Now,
the other stuff I've loaded at home,

393
00:25:25,490 --> 00:25:28,970
so I don't know if there's something going
on here at Coastal or what, but I can't.

394
00:25:28,970 --> 00:25:31,810
I just sat there for 20 minutes and it
never came back, so

395
00:25:31,810 --> 00:25:32,710
I don't know what's happening.

396
00:25:33,150 --> 00:25:35,790
I'll get those up there so
you can have the new slides.

397
00:25:35,910 --> 00:25:38,870
What's in there? There's
the slides for the book,

398
00:25:39,130 --> 00:25:41,810
and then there's what's
called some guided practice

399
00:25:41,810 --> 00:25:44,850
things that the author
has to get together.

400
00:25:45,130 --> 00:25:47,830
My stuff has that in it, too,
but, you know, we're going to use hers

401
00:25:47,830 --> 00:25:50,170
because I guess she's
made some changes or whatever.

402
00:25:51,590 --> 00:25:54,870
Plus, I like the fact that
there's some cooler imagery in this,

403
00:25:54,870 --> 00:25:57,610
and I thought I had
some, so we'll use that.

404
00:25:59,310 --> 00:26:02,570
So, let's go in here into
Chapter 2 and look at this.

405
00:26:02,830 --> 00:26:08,930
Now, the way this is organized
is that Chapter 2 says, hey, now,

406
00:26:09,690 --> 00:26:11,970
you've got your software,
you've got your hardware, here's

407
00:26:11,970 --> 00:26:13,990
the reason why there's
some issues with this stuff.

408
00:26:14,030 --> 00:26:15,510
Here's how kind of parallelism works.

409
00:26:16,530 --> 00:26:20,910
Then in Chapter 3, they go, okay, one
way to do parallelism

410
00:26:20,910 --> 00:26:22,190
is with message passing,

411
00:26:22,470 --> 00:26:24,830
and they're going to introduce you to
something called the MPI,

412
00:26:25,050 --> 00:26:26,290
the message passing interface,

413
00:26:26,350 --> 00:26:31,450
which is the standard that's commonly
used 99% of the world for multi-node,

414
00:26:31,450 --> 00:26:34,150
high performance computing
for scientific applications

415
00:26:34,150 --> 00:26:35,230
and all this sort of stuff.

416
00:26:36,250 --> 00:26:41,890
Then they do, I think, P threads.
Let's see. Is that what it is?

417
00:26:42,650 --> 00:26:45,630
Yes, they do P threads, so
multi-threaded programming for

418
00:26:45,630 --> 00:26:46,670
a shared memory system.

419
00:26:47,530 --> 00:26:49,890
After that, then they
do what's called OpenMP.

420
00:26:51,770 --> 00:26:54,730
And I think that this year, I'm
going to do it in that order.

421
00:26:54,910 --> 00:27:02,030
I don't normally, I normally go and
do P threads, then MPI, then this,

422
00:27:02,750 --> 00:27:04,430
but let's do it in the
order that the book has to.

423
00:27:05,530 --> 00:27:09,530
It's got its pros
and cons, because there's some

424
00:27:09,530 --> 00:27:12,050
things that are really
challenging about MPI up front

425
00:27:12,050 --> 00:27:15,970
to even get it working that you don't have
with the threads, but

426
00:27:15,970 --> 00:27:17,330
the threads are super limited.

427
00:27:18,230 --> 00:27:20,930
I want to just give
you this little idea here.

428
00:27:21,370 --> 00:27:23,610
If you talk about the amount of effort it
takes for you to

429
00:27:23,610 --> 00:27:25,910
write a program in parallel

430
00:27:25,910 --> 00:27:29,230
and the resulting performance that you're
going to get out of it,

431
00:27:29,930 --> 00:27:33,390
like the bang for your buck, if you
will, and the effort you put into it,

432
00:27:33,690 --> 00:27:35,330
the graph looks kind of like this.

433
00:27:42,880 --> 00:27:45,620
So this is performance,
and this is your effort.

434
00:27:51,260 --> 00:27:54,420
With OpenMP, you can just put
in a little bit of effort,

435
00:27:55,400 --> 00:27:58,200
and you can get a lot of performance out,
and in some way it kind of tickers off.

436
00:27:58,360 --> 00:28:00,760
You can't really do it more with OpenMP.

437
00:28:02,580 --> 00:28:08,200
On the P threads, it
generally takes a bit more effort,

438
00:28:10,910 --> 00:28:13,610
but you can do some things
in here you can't do over here,

439
00:28:14,070 --> 00:28:16,930
and you kind of get to
the same kind of level here.

440
00:28:17,810 --> 00:28:23,030
With MPI, MPI is a lot harder to
use, but it's more or less like this.

441
00:28:24,110 --> 00:28:28,870
You can do things with
MPI, because this is multiple nodes.

442
00:28:33,090 --> 00:28:40,110
P threads and OpenMP by themselves,
that only works on one node.

443
00:28:41,070 --> 00:28:43,390
So, you know, that
expanse machine with 700 nodes,

444
00:28:43,970 --> 00:28:48,490
you would never be able to use all
700 nodes writing just a P thread program

445
00:28:48,490 --> 00:28:50,230
or just an OpenMP program.

446
00:28:50,390 --> 00:28:53,790
But if you wrote a MPI
program, you could use all of those.

447
00:28:54,090 --> 00:28:57,150
But writing an MPI
program is way harder to

448
00:28:57,150 --> 00:28:59,530
get the same sort
of performance out of it.

449
00:29:01,090 --> 00:29:07,570
And then later, you add all
these together, like this plus this,

450
00:29:08,110 --> 00:29:11,850
and you get some kind
of thing that's like that.

451
00:29:12,170 --> 00:29:14,870
You get the best of overalls.

452
00:29:14,870 --> 00:29:18,110
Sometimes you use OpenMP for
doing work inside of a node,

453
00:29:18,530 --> 00:29:20,830
and you use MPI to do
work a month of a node.

454
00:29:22,270 --> 00:29:26,270
Then, of course, you add in things like
CUDA and other kinds of video type stuff,

455
00:29:26,390 --> 00:29:29,750
and then you get the best of
overalls for using the CPUs and the GPUs.

456
00:29:30,030 --> 00:29:33,050
But those two
things are heterogeneous, right?

457
00:29:33,690 --> 00:29:35,330
Like the stuff that
you're doing on the GPUs

458
00:29:35,330 --> 00:29:36,810
is different than what
you're doing on a CPU,

459
00:29:37,130 --> 00:29:38,270
but that turns out to be a problem.

460
00:29:38,370 --> 00:29:39,930
Remember that problem we did
the other day where we said,

461
00:29:39,930 --> 00:29:41,330
that's why we ran into pieces?

462
00:29:43,050 --> 00:29:47,030
Well, how are you going to split that
between the two cores and also the GPU?

463
00:29:48,090 --> 00:29:49,430
Does it even make sense to do that?

464
00:29:49,570 --> 00:29:52,310
The GPU might be doing it one way,
the other things with it some other way.

465
00:29:52,770 --> 00:29:53,710
The GPU's faster, maybe.

466
00:29:54,350 --> 00:29:55,690
So how do your load balance?

467
00:29:55,910 --> 00:29:58,350
If you do it all of a
sudden, the GPU is done with this part,

468
00:29:59,030 --> 00:30:01,110
but the CPU is still sitting
there chugging and

469
00:30:01,110 --> 00:30:01,930
it's not doing anything.

470
00:30:02,210 --> 00:30:03,950
Now the GPU is sitting unused, right?

471
00:30:04,130 --> 00:30:07,810
So there's this hybrid nature that what we
would really like to be able to do

472
00:30:07,810 --> 00:30:15,330
is use the CPU plus the GPU
to solve a problem across many nodes

473
00:30:15,330 --> 00:30:17,810
using all of those things.

474
00:30:17,950 --> 00:30:19,330
That's kind of like the holy grail, right?

475
00:30:19,690 --> 00:30:22,210
A lot of times
it's not actually worth trying

476
00:30:22,210 --> 00:30:24,190
to write something that
uses all of that hardware.

477
00:30:24,390 --> 00:30:25,350
It might be like, you know what?

478
00:30:25,750 --> 00:30:28,190
We're just going to use
the GPUs across multiple nodes

479
00:30:28,190 --> 00:30:32,270
and we're not going to use any kind
of CPU except for to orchestrate the work.

480
00:30:33,990 --> 00:30:37,210
The holy grail would be the two things
on the GPU that are good for GPUs

481
00:30:37,430 --> 00:30:42,110
and do things on CPUs that suck on
a GPU and divide the work up that way.

482
00:30:44,430 --> 00:30:47,810
So let's go ahead and
get started with chapter two.

483
00:30:48,850 --> 00:30:50,290
You know, these are
going to be some slides.

484
00:30:58,210 --> 00:30:59,210
Let's talk about this.

485
00:30:59,650 --> 00:31:01,610
You know, when you run the...

486
00:31:01,610 --> 00:31:03,350
I know you know a
lot of this stuff already, okay?

487
00:31:03,450 --> 00:31:05,050
I'm just trying to go over it here.

488
00:31:06,590 --> 00:31:09,170
Your program runs a lot
of different programs all the time.

489
00:31:09,330 --> 00:31:12,110
If you open a task list or
task manager or looking at our processes,

490
00:31:12,110 --> 00:31:17,170
we all know that
the operating system, you know,

491
00:31:17,210 --> 00:31:19,210
is allowing multiple programs
to run at the

492
00:31:19,210 --> 00:31:21,430
same time and have
access to this shared resource,

493
00:31:21,690 --> 00:31:24,830
like your shared CPU, your shared
memory and all this sort of stuff.

494
00:31:24,950 --> 00:31:28,470
And it tasks switches between them so
that it kind of uses this illusion

495
00:31:28,470 --> 00:31:30,230
of multiple things running
at the same time,

496
00:31:30,550 --> 00:31:32,670
maintains interactivity with the computer.

497
00:31:34,030 --> 00:31:35,990
And the typical von Neumann architecture,

498
00:31:35,990 --> 00:31:40,830
which is also sometimes referred
to as the stored program computer.

499
00:31:40,830 --> 00:31:46,210
Now, this should be a little bit
of a review, at least from 210,

500
00:31:46,390 --> 00:31:49,010
because in 210 we
talked about von Neumann,

501
00:31:49,230 --> 00:31:51,010
our bottleneck and all this sort of stuff.

502
00:31:51,210 --> 00:31:54,530
Remember, you've got your CPU over here.

503
00:31:54,590 --> 00:31:58,010
It's connected to some sort
of bus, so a interconnection network.

504
00:31:58,190 --> 00:32:01,430
And maybe that network is literally
like on the motherboard, you know?

505
00:32:02,030 --> 00:32:03,850
And so we're not saying it's a network.

506
00:32:03,990 --> 00:32:05,750
It's got ethernet cables
hanging out of it.

507
00:32:05,910 --> 00:32:07,930
But like the
motherboard itself has networks

508
00:32:07,930 --> 00:32:09,270
on it inside of the chip tab,

509
00:32:09,270 --> 00:32:12,010
networks inside of the
chips, so things communicate.

510
00:32:12,250 --> 00:32:15,270
It's just not a network like this
where wires are hanging out, you know?

511
00:32:16,090 --> 00:32:17,530
And then you've got your RAM over here.

512
00:32:19,090 --> 00:32:20,090
And you know how it is, right?

513
00:32:20,790 --> 00:32:23,710
You fetch instruction from memory.

514
00:32:23,910 --> 00:32:26,590
You bring that into the CPU.

515
00:32:27,070 --> 00:32:29,050
The CPU decodes that thing.

516
00:32:29,450 --> 00:32:32,930
It loads your registers up with
the appropriate things from any memory.

517
00:32:33,090 --> 00:32:34,650
It executes that stuff,
and when it gets answers,

518
00:32:34,850 --> 00:32:36,090
it sticks it back out here to make memory.

519
00:32:36,630 --> 00:32:40,610
And the thing is, right, if the
CPU is being used

520
00:32:40,610 --> 00:32:41,710
and there's multiple CPUs,

521
00:32:41,890 --> 00:32:44,630
you've got multiple ones and these
things all happening at the same time,

522
00:32:44,790 --> 00:32:47,650
all accessing this
main memory here, right?

523
00:32:47,710 --> 00:32:50,870
So you can imagine that like at some
point you can't have

524
00:32:50,870 --> 00:32:52,030
so many things running

525
00:32:52,030 --> 00:32:54,230
at the same time, and all
of a sudden this becomes the bottleneck

526
00:32:54,230 --> 00:32:55,530
because you just can't.

527
00:32:55,610 --> 00:32:58,010
It's too much stuff trying to read
and write memory at the same time

528
00:32:58,010 --> 00:32:59,150
and the whole system slows down.

529
00:32:59,330 --> 00:33:00,890
And we've probably
experienced that, right,

530
00:33:00,910 --> 00:33:03,330
when we run something that's
computationally expensive on our computer

531
00:33:03,330 --> 00:33:05,790
and other stuff starts
sucking on the computer.

532
00:33:05,790 --> 00:33:07,050
That's kind of the deal.

533
00:33:08,590 --> 00:33:11,150
So, you know, you fetch the instructions.

534
00:33:11,490 --> 00:33:13,210
You store the stuff back out of memory.

535
00:33:13,450 --> 00:33:15,250
That's why they call it a bottleneck
because it's constantly

536
00:33:15,250 --> 00:33:16,350
moving back and forth

537
00:33:16,350 --> 00:33:18,250
between the CPU and the memory.

538
00:33:18,890 --> 00:33:19,870
It's not great.

539
00:33:20,230 --> 00:33:21,910
You know, how could you speed this up?

540
00:33:22,530 --> 00:33:25,090
Well, you know, one way that
you can speed it up is,

541
00:33:25,330 --> 00:33:26,630
by the stuff you learned about in 356,

542
00:33:27,350 --> 00:33:29,750
you can have all these
separate processes that are running

543
00:33:29,750 --> 00:33:30,950
in your context switching.

544
00:33:31,470 --> 00:33:37,370
And, for example, you give a little
bit of time to the first process,

545
00:33:37,610 --> 00:33:38,950
a little bit of time,
a little bit of time,

546
00:33:39,050 --> 00:33:40,590
and you round rob it between these things.

547
00:33:41,030 --> 00:33:43,450
Now, you could just do it as
a fixed policy like that and say,

548
00:33:43,950 --> 00:33:46,810
you get one millisecond,
you get one millisecond,

549
00:33:46,890 --> 00:33:48,790
and you get another millisecond
and just go around like this.

550
00:33:49,570 --> 00:33:51,070
But now the problem is
that some of these processes

551
00:33:51,070 --> 00:33:53,210
probably have stuff that
they're not blocking on.

552
00:33:53,270 --> 00:33:54,910
They're not waiting on
stuff from the file system.

553
00:33:55,010 --> 00:33:56,430
They're not waiting on
stuff from the network.

554
00:33:56,730 --> 00:33:59,190
They have instructions ready
to run right now.

555
00:33:59,250 --> 00:34:02,610
So that's why you have, like,
the run queue and the ready queue

556
00:34:02,610 --> 00:34:05,530
and the waiting queue and all
that sort of stuff back in 356,

557
00:34:06,270 --> 00:34:09,210
because there's no reason to
task a switch between processes

558
00:34:09,210 --> 00:34:10,810
that are waiting on
something in their block.

559
00:34:11,030 --> 00:34:14,750
They may as well be
woken back up whenever whatever's ready

560
00:34:14,750 --> 00:34:16,350
for them to go do their next thing, right?

561
00:34:16,430 --> 00:34:17,870
So there's just different levels of that.

562
00:34:18,030 --> 00:34:19,070
You learned all that.

563
00:34:19,450 --> 00:34:21,910
And that's kind of a
type of parallelism here, right?

564
00:34:22,270 --> 00:34:24,410
There's multiple things going
on at the same time,

565
00:34:24,410 --> 00:34:26,610
but, like, the way this is drawn here is,

566
00:34:26,610 --> 00:34:29,030
it's not really happening
at the same time.

567
00:34:29,330 --> 00:34:36,840
Like, this process, you
know, it doesn't do anything

568
00:34:36,840 --> 00:34:38,140
until this one is done.

569
00:34:39,040 --> 00:34:40,640
So there's kind of this illusion, right?

570
00:34:40,980 --> 00:34:44,500
And it's doing it so
fast that everything kind of seems

571
00:34:44,500 --> 00:34:45,460
to be running at the same time.

572
00:34:45,560 --> 00:34:46,620
It's not really, right?

573
00:34:47,480 --> 00:34:48,240
It's multitasking.

574
00:34:49,740 --> 00:34:51,480
But then, like, what you could do,

575
00:34:51,480 --> 00:34:52,820
like in the class you learned about,

576
00:34:52,960 --> 00:34:54,360
that same process comes out here.

577
00:34:54,460 --> 00:34:56,300
It can spawn some threads.

578
00:34:57,040 --> 00:34:59,160
And these threads can be
working at the same time.

579
00:34:59,360 --> 00:35:00,120
So you form them.

580
00:35:00,220 --> 00:35:01,020
You join them together.

581
00:35:01,020 --> 00:35:03,260
Those are the terms that
you learned about at 356.

582
00:35:04,400 --> 00:35:08,380
And this could be doing something
at exactly the same time as this.

583
00:35:09,220 --> 00:35:12,520
And if there were multiple
functional units or multiple cores,

584
00:35:13,280 --> 00:35:15,600
the sets of instructions and
data associated with this area

585
00:35:15,600 --> 00:35:18,300
can gain access to processes at
the same time as this one.

586
00:35:18,440 --> 00:35:19,700
And the good part about it is,

587
00:35:19,700 --> 00:35:22,680
is that threads inside the same process

588
00:35:22,680 --> 00:35:24,840
all have access to the same memory.

589
00:35:25,280 --> 00:35:27,500
So, like, if you
have a variable in general,

590
00:35:27,660 --> 00:35:29,040
like, let's say you
had an array over here,

591
00:35:29,040 --> 00:35:31,760
and that was in this process A of 100,

592
00:35:32,800 --> 00:35:35,380
over here, that thread
can access this array,

593
00:35:35,560 --> 00:35:36,260
and so could this one.

594
00:35:36,360 --> 00:35:37,740
In fact, if you want them to be different,

595
00:35:37,760 --> 00:35:39,840
you have to do some
things so that they don't share.

596
00:35:40,260 --> 00:35:42,240
But in general,
they share these locations.

597
00:35:42,400 --> 00:35:44,620
Because they have the
same virtual address space,

598
00:35:44,620 --> 00:35:46,220
because they're all inside the process.

599
00:35:46,940 --> 00:35:50,160
And the memory manager
in the operating system

600
00:35:50,160 --> 00:35:52,420
is only doing virtual address spacing

601
00:35:52,420 --> 00:35:53,660
on a per-process basis,

602
00:35:53,780 --> 00:35:56,060
not down to the
per-thread basis generally, right?

603
00:35:58,540 --> 00:36:01,480
So, they come along, like I said,

604
00:36:02,220 --> 00:36:04,620
they got multiple cores here,

605
00:36:04,740 --> 00:36:05,840
so they got two CPUs,

606
00:36:06,660 --> 00:36:09,740
both attached to a single RAM slot here.

607
00:36:10,380 --> 00:36:11,800
And there's all a bunch
of stuff in here, right?

608
00:36:11,920 --> 00:36:16,500
There's the sets of registers in here,

609
00:36:17,060 --> 00:36:18,620
and there's this cache.

610
00:36:18,940 --> 00:36:21,340
Now, how many people
know what cache memory is

611
00:36:21,340 --> 00:36:22,120
and what it's for?

612
00:36:28,240 --> 00:36:29,980
Surely somebody's saying
that, isn't that right?

613
00:36:33,130 --> 00:36:33,490
Okay.

614
00:36:33,350 --> 00:36:33,970
All right.

615
00:36:34,250 --> 00:36:34,950
You've got the Von Neumann.

616
00:36:35,390 --> 00:36:36,150
You've got your CPU,

617
00:36:36,730 --> 00:36:37,830
and you've got your memory over here.

618
00:36:38,550 --> 00:36:39,710
And let's say in that memory,

619
00:36:39,810 --> 00:36:41,430
there's an array that you have here.

620
00:36:41,650 --> 00:36:43,110
And you've got a tidiness of for loop.

621
00:36:43,290 --> 00:36:44,990
It's just traversing every
element of that array,

622
00:36:45,010 --> 00:36:46,430
doing some operation on it.

623
00:36:46,770 --> 00:36:48,910
So, it's like, I'm going
to get A sub zero,

624
00:36:49,250 --> 00:36:50,030
bring it over here,

625
00:36:50,170 --> 00:36:51,130
do some work with it,

626
00:36:51,230 --> 00:36:52,410
and put an answer back out of here.

627
00:36:52,530 --> 00:36:53,690
I'm going to go grab the next one,

628
00:36:53,750 --> 00:36:54,530
bring it over here,

629
00:36:54,710 --> 00:36:55,510
and do some work to it,

630
00:36:55,530 --> 00:36:56,370
and put it back out of here.

631
00:36:57,150 --> 00:36:57,810
Well, that's stupid,

632
00:36:57,910 --> 00:36:59,730
because if you're in an array,

633
00:36:59,730 --> 00:37:01,170
and you're doing it one after another,

634
00:37:01,750 --> 00:37:03,390
you know you're going to be executing

635
00:37:03,390 --> 00:37:04,910
the very next instruction

636
00:37:04,910 --> 00:37:07,250
that's going to execute on
the very next data thing.

637
00:37:07,510 --> 00:37:08,450
Why don't you just go ahead

638
00:37:08,450 --> 00:37:09,910
and bring a big block of this

639
00:37:09,910 --> 00:37:12,190
and bring it from RAM all at once

640
00:37:12,190 --> 00:37:14,670
so that the next time you use that array,

641
00:37:14,910 --> 00:37:16,690
you don't have to get it from a memory.

642
00:37:17,150 --> 00:37:19,250
You can store it in a
little place in here called the cache.

643
00:37:20,010 --> 00:37:21,150
So, it's just like the cache,

644
00:37:21,310 --> 00:37:22,970
like say, like your browser cache.

645
00:37:23,550 --> 00:37:24,810
The other thing is browser cache, why?

646
00:37:25,010 --> 00:37:25,950
What's the benefit of that?

647
00:37:26,010 --> 00:37:27,070
So, it doesn't have to grab it again

648
00:37:27,070 --> 00:37:28,110
pulling it across the internet?

649
00:37:28,310 --> 00:37:28,630
Because why?

650
00:37:28,630 --> 00:37:29,670
Because the internet's slow

651
00:37:29,670 --> 00:37:31,130
compared to your hard drive over here.

652
00:37:31,570 --> 00:37:32,690
Well, the same thing's true here.

653
00:37:33,270 --> 00:37:34,670
This is very slow

654
00:37:34,670 --> 00:37:36,830
compared to, say, stuff in here.

655
00:37:37,310 --> 00:37:38,390
So, they break it up into what's called

656
00:37:38,390 --> 00:37:40,210
the memory hierarchy, all right?

657
00:37:40,530 --> 00:37:41,910
That's typically drawn like this.

658
00:37:42,010 --> 00:37:43,390
They'll do like a little thing like this,

659
00:37:43,470 --> 00:37:45,870
and over here might
be like your hard drive,

660
00:37:46,310 --> 00:37:47,230
and then your RAM,

661
00:37:47,990 --> 00:37:49,450
and then your level three cache,

662
00:37:49,850 --> 00:37:51,170
and then your level two cache,

663
00:37:51,330 --> 00:37:52,470
and then your level one cache,

664
00:37:52,790 --> 00:37:54,150
where what's happening is,

665
00:37:54,150 --> 00:37:55,050
in this direction,

666
00:37:55,050 --> 00:37:56,430
it's getting a lot faster.

667
00:37:57,010 --> 00:37:58,630
But it's also so fast,

668
00:37:58,630 --> 00:38:00,490
but it's also expensive,

669
00:38:00,490 --> 00:38:02,390
and it's also small.

670
00:38:03,750 --> 00:38:05,690
Like, if this is
on the order of gigabytes,

671
00:38:06,350 --> 00:38:07,570
then this will probably be on the order

672
00:38:07,570 --> 00:38:09,190
of several, several nags.

673
00:38:09,350 --> 00:38:10,770
This might be a matter or less,

674
00:38:10,850 --> 00:38:11,730
and then you get down here,

675
00:38:11,830 --> 00:38:13,230
and that's not gonna order a kilobytes.

676
00:38:14,270 --> 00:38:16,390
Okay, like, if you
could have gigabytes in here,

677
00:38:16,590 --> 00:38:19,150
you'd do that, but you can't.

678
00:38:19,230 --> 00:38:20,430
You know, it's just, physically,

679
00:38:20,490 --> 00:38:21,170
that doesn't work.

680
00:38:21,310 --> 00:38:22,630
You can't put all of that stuff

681
00:38:22,630 --> 00:38:23,550
down here in this level.

682
00:38:23,650 --> 00:38:24,490
You gotta have a hierarchy.

683
00:38:25,130 --> 00:38:26,130
So, the idea is,

684
00:38:26,130 --> 00:38:27,770
that when you have that array in here,

685
00:38:27,930 --> 00:38:29,390
if you're accessing it,

686
00:38:29,510 --> 00:38:31,090
it takes like, say, like
a chunk of this array,

687
00:38:31,550 --> 00:38:32,870
bring it up and copy it in here.

688
00:38:33,070 --> 00:38:34,610
And it may be like a chunk of this array,

689
00:38:34,610 --> 00:38:35,870
gets brought into here.

690
00:38:36,050 --> 00:38:37,050
And then some chunk of that array

691
00:38:37,050 --> 00:38:37,650
gets brought in here.

692
00:38:37,830 --> 00:38:40,050
So, when the CPU access is A of I,

693
00:38:40,330 --> 00:38:42,950
if that happens to be in this chunk,

694
00:38:44,350 --> 00:38:45,190
and how do you know that?

695
00:38:45,570 --> 00:38:47,630
That stuff is beyond
the scope of this class.

696
00:38:47,770 --> 00:38:49,090
However, in 3.10,

697
00:38:49,210 --> 00:38:50,450
if you take that as an elective,

698
00:38:50,530 --> 00:38:52,230
they talk exactly how that works.

699
00:38:52,470 --> 00:38:54,110
Right now, all we hear is,

700
00:38:54,110 --> 00:38:55,490
conceptually, how it works.

701
00:38:56,250 --> 00:38:59,730
Then, you can just grab
this out of this cache,

702
00:39:00,170 --> 00:39:01,670
bring it up into some registers.

703
00:39:02,350 --> 00:39:04,530
The cores interact
directly with the registers,

704
00:39:04,650 --> 00:39:06,130
and when it's time for the answer

705
00:39:06,130 --> 00:39:07,170
to be written back out of memory,

706
00:39:07,590 --> 00:39:09,070
well, it can be written back out to this.

707
00:39:09,270 --> 00:39:11,290
But then later, that can
be purged down into here.

708
00:39:11,450 --> 00:39:12,530
And then later, that can go here.

709
00:39:12,650 --> 00:39:13,370
And then sometime later,

710
00:39:13,410 --> 00:39:14,350
when it's not being used,

711
00:39:14,450 --> 00:39:15,390
it goes back in here.

712
00:39:15,630 --> 00:39:16,210
Does that make sense?

713
00:39:16,750 --> 00:39:17,610
That's kind of the way.

714
00:39:18,170 --> 00:39:19,650
So, really big and cheap.

715
00:39:19,650 --> 00:39:24,030
Like, the cost per byte inside of RAM

716
00:39:24,030 --> 00:39:25,270
is cause for timing.

717
00:39:25,510 --> 00:39:27,230
.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

718
00:39:27,250 --> 00:39:28,770
or what's sent, pinning, right?

719
00:39:28,950 --> 00:39:30,010
I mean, per byte.

720
00:39:30,670 --> 00:39:31,770
And then when you get up in here,

721
00:39:32,370 --> 00:39:34,110
the cost per byte is way more.

722
00:39:34,330 --> 00:39:35,190
And you finally get in here,

723
00:39:35,250 --> 00:39:35,990
and the register is,

724
00:39:36,070 --> 00:39:37,970
oh, there might only be,

725
00:39:37,970 --> 00:39:39,430
like, a kilobyte or two registers.

726
00:39:39,670 --> 00:39:41,530
So, that's really expensive, okay?

727
00:39:41,670 --> 00:39:43,450
So, that's the reason why.

728
00:39:43,590 --> 00:39:44,570
You can't have your cake,

729
00:39:44,590 --> 00:39:46,010
you need two, so to speak, right?

730
00:39:47,750 --> 00:39:49,490
That's what it's for.

731
00:39:49,490 --> 00:39:52,130
so that, that thing we were
talking about by

732
00:39:52,130 --> 00:39:53,670
accessing data, that's called

733
00:39:53,670 --> 00:39:57,630
locality, principle of locality. And
there's two different types of locality.

734
00:39:58,230 --> 00:40:03,910
There's what's called spatial locality
and temporal locality. Alright, like

735
00:40:03,910 --> 00:40:06,950
imagine this loop. We've
got a thousand floats

736
00:40:06,950 --> 00:40:09,430
in an array Z. We've got a running

737
00:40:09,430 --> 00:40:14,210
sum. All this things doing is just going
from, you know, say the beginning of this

738
00:40:14,210 --> 00:40:18,550
to the end of this plus equals the
element and it's making a sum. So we've

739
00:40:18,550 --> 00:40:23,790
got, this is a big O of N, kind of
loop here. And, you know,

740
00:40:23,910 --> 00:40:24,910
the very first element gets

741
00:40:24,910 --> 00:40:27,290
access to this. The
very next element that gets

742
00:40:27,290 --> 00:40:29,430
access to this. We know
that. If we look at

743
00:40:29,430 --> 00:40:35,810
the loop structure, we can tell that,
right? So locality means, is it going to

744
00:40:35,810 --> 00:40:41,430
access this same thing again sometime
soon? Is it going to access something

745
00:40:41,430 --> 00:40:45,990
next to it soon? So spatial
means closer with

746
00:40:45,990 --> 00:40:48,330
respect to location. Temporal

747
00:40:48,330 --> 00:40:58,350
means close with respect to time. Okay? So
the idea would be is that the cause

748
00:40:58,350 --> 00:41:02,390
you're doing, like we're saying, you're
accessing, if say right now you access

749
00:41:02,390 --> 00:41:06,870
this location, there's a good chance
you're going to access something close

750
00:41:06,870 --> 00:41:12,210
to it. Right? And then you
might say, well no, I mean,

751
00:41:12,470 --> 00:41:16,270
no, not at all. Like in
that example you gave, there's a good

752
00:41:16,270 --> 00:41:19,750
chance. But like in general, is there a
good chance? Let me think about it. Let me

753
00:41:19,750 --> 00:41:22,250
ask you something. How
many programs have actually done

754
00:41:22,250 --> 00:41:26,910
anything useful? Have done
something without arrays or data

755
00:41:26,910 --> 00:41:32,410
structures or something? Nothing. They all
process data. The reason you write a

756
00:41:32,410 --> 00:41:35,370
program is to process data.
That's not always true, right? I

757
00:41:35,370 --> 00:41:41,690
mean, it's like a little microprocessor
inside of your microwave. That's not

758
00:41:41,690 --> 00:41:43,350
the system we're talking about. That's
not how most of the people

759
00:41:43,350 --> 00:41:46,050
don't care about that. The human
and the loop kind of things

760
00:41:46,050 --> 00:41:52,290
that don't really matter. What matters
is, is that most everything deals

761
00:41:52,290 --> 00:41:56,490
with stuff that has arrays or
structures, collections of

762
00:41:56,490 --> 00:41:58,390
data that are close
to each other. Think about when

763
00:41:58,390 --> 00:42:01,730
you do like data encapsulation in a
language. You're putting all those things

764
00:42:01,730 --> 00:42:04,810
together. And those things couldn't be all
located in memory next to each

765
00:42:04,810 --> 00:42:08,710
other. Meaning that when you access
it, if you just access an

766
00:42:08,710 --> 00:42:11,070
element of the structure, is there a
good chance that in that class

767
00:42:11,070 --> 00:42:14,470
you're going to access other things in
that class? So the instance of

768
00:42:14,470 --> 00:42:16,010
that class might
actually have stuff packed

769
00:42:16,010 --> 00:42:18,310
together in memory, you might
as well bring that whole thing

770
00:42:18,310 --> 00:42:26,070
up close. Because your program exhibits
the locality. Now, if you have

771
00:42:26,070 --> 00:42:28,550
a program that the way it
works is it just randomly accesses

772
00:42:28,550 --> 00:42:30,090
everything everywhere all
over the computer.

773
00:42:30,370 --> 00:42:31,670
Well, then it ain't going to
have a lot of new

774
00:42:31,670 --> 00:42:34,490
locality. How many programs have you
ever had like that? That where

775
00:42:34,490 --> 00:42:38,050
every instruction is some random thing
that's not related completely to any

776
00:42:38,050 --> 00:42:42,550
other thing in the whole thing.
It's not, right? So nine times

777
00:42:42,550 --> 00:42:45,990
out of ten, programs have locality.

778
00:42:46,230 --> 00:42:51,090
So therefore, if a program
has locality, then it benefits

779
00:42:51,090 --> 00:42:54,610
from this memory hierarchy. If
it doesn't have any locality,

780
00:42:55,250 --> 00:42:57,970
it doesn't really benefit from
it. It actually, it hurts

781
00:42:57,970 --> 00:43:00,850
it a little bit, not
much. But the thing is,

782
00:43:01,130 --> 00:43:06,430
if 90% of your programs
have locality, only 10%, there's

783
00:43:06,430 --> 00:43:09,730
hundreds of times speed up
having the thing for those

784
00:43:09,730 --> 00:43:12,890
90% and only a very
small slowdown for the ones

785
00:43:12,890 --> 00:43:15,990
that don't, that it's in
your best interest to have locality.

786
00:43:16,010 --> 00:43:18,650
It's a computer that
has this memory hierarchy, okay?

787
00:43:19,010 --> 00:43:24,690
That's kind of what
they're saying. This is also

788
00:43:24,690 --> 00:43:27,830
referred to as like, you know, one of the
primary concepts in computer

789
00:43:27,830 --> 00:43:32,470
organization, computer
architecture, that these

790
00:43:32,470 --> 00:43:35,690
cash blocks exploit the
fact that your program has

791
00:43:35,690 --> 00:43:37,530
locality. And if it
doesn't, it's not really that

792
00:43:37,530 --> 00:43:39,670
big of a deal. But if it does have
that locality, you benefit

793
00:43:39,670 --> 00:43:41,290
from it a lot, okay?

794
00:43:43,610 --> 00:43:45,710
So when you have a
cash hit, what does the cash

795
00:43:45,710 --> 00:43:48,490
hit mean? It means that the
thing you're looking for is actually

796
00:43:48,490 --> 00:43:52,150
found in cash. Like, for
example, say you have a cash

797
00:43:52,150 --> 00:43:56,250
here, this is cash you want
to draw on top of it,

798
00:43:56,310 --> 00:43:58,930
this one over here, and
you ask for some sort of

799
00:43:58,930 --> 00:44:03,370
variable x. Well, let's suppose that
x was in, it's obviously going

800
00:44:03,370 --> 00:44:05,950
out here in RAM, so
this is RAM. But let's say

801
00:44:05,950 --> 00:44:08,870
this x is not in here
and it's not in there, okay?

802
00:44:09,090 --> 00:44:12,610
It hasn't been executed recently, it
hasn't been accessed recently, so it's not

803
00:44:12,610 --> 00:44:17,530
in there. So whenever your CPU
goes and says, hey, give me x,

804
00:44:18,290 --> 00:44:20,670
it goes in here and it
looks and says, hey, is x in

805
00:44:20,670 --> 00:44:26,030
there? Ah, no. That's called a cash
miss, okay? Then it says, oh, it's

806
00:44:26,030 --> 00:44:29,470
not in there. Let me go
check in here. Ah, no, it's not

807
00:44:29,470 --> 00:44:32,530
in there. That's a cash miss.
Well, then if it's not in cash

808
00:44:32,530 --> 00:44:35,390
and this is cash and this
is RAM over here, well, then obviously

809
00:44:35,390 --> 00:44:38,790
it's going to be in RAM. Actually,
that's not true. Where might it be?

810
00:44:39,870 --> 00:44:43,090
On this, that's something
that you learned about in

811
00:44:43,090 --> 00:44:49,630
356. It has to first be moved from this
in RAM, right? It might, hell, it might be

812
00:44:49,630 --> 00:44:51,310
in a database that you're
waiting to pull across the

813
00:44:51,310 --> 00:44:52,930
network, for God's sake.
But what we're saying is,

814
00:44:53,230 --> 00:44:56,270
eventually it's in RAM
on the computer. Does that

815
00:44:56,270 --> 00:44:59,570
make sense? You moved it up out of the
file and you grabbed it

816
00:44:59,570 --> 00:45:00,750
from the network or whatever.

817
00:45:01,190 --> 00:45:07,030
So it comes down here, grabs that x and
let's say x, this x value is 7. So

818
00:45:07,030 --> 00:45:11,290
it's going to come over here and put that
7 here and it's going to put that 7

819
00:45:11,290 --> 00:45:15,250
here. And now the
next time that you access

820
00:45:15,250 --> 00:45:18,330
x, if it hasn't
been ejected from these caches,

821
00:45:18,790 --> 00:45:21,330
it will come down here and look for x,
like say this variable

822
00:45:21,330 --> 00:45:23,730
sum, you know, plus equals.

823
00:45:24,350 --> 00:45:26,610
Well, you're going to
need that every, every,

824
00:45:26,610 --> 00:45:31,030
every time, right? It's going to be a hit
here as soon as it goes here. So that

825
00:45:31,030 --> 00:45:35,790
first time it took some delta t amount of
time to grow here, then delta t amount of

826
00:45:35,790 --> 00:45:39,190
time that didn't find it here and this is
some delta t amount of time of year. So

827
00:45:39,190 --> 00:45:41,150
in other words, a long time to grab it.

828
00:45:41,510 --> 00:45:44,010
But after it gets
copied back over here, now

829
00:45:44,010 --> 00:45:46,070
it's only this amount
of time right here that

830
00:45:46,070 --> 00:45:48,910
it took just delta
t. Now I'm pretending like

831
00:45:48,910 --> 00:45:50,770
these delta t's are all
the same that they're not.

832
00:45:51,550 --> 00:45:54,030
But like this total
amount of time would be

833
00:45:54,030 --> 00:45:57,450
3 delta t amount of time. This is only
delta t amount of

834
00:45:57,450 --> 00:46:00,830
time and obviously delta t
is a lot less than 3 delta t, right?

835
00:46:01,490 --> 00:46:05,070
But now the truth of the matter is it's
orders of magnitude. It's like

836
00:46:05,070 --> 00:46:09,930
this might be, this might
be 10 units of time,

837
00:46:10,710 --> 00:46:14,150
this might be 100 units
of time and this might

838
00:46:14,150 --> 00:46:16,430
be 5,000 units of time.

839
00:46:17,310 --> 00:46:20,490
Ram is much slower
than the other things, orders

840
00:46:20,490 --> 00:46:24,330
of magnitude, okay? So you
want to have as many

841
00:46:24,330 --> 00:46:27,570
cache hits as you can, right? You want to,
you hope your cache hits

842
00:46:27,570 --> 00:46:28,470
are more of a cost.

843
00:46:28,830 --> 00:46:32,070
If you have a cache hit, it only takes
delta t amount of time. If you have a

844
00:46:32,070 --> 00:46:35,770
cache misses, it might all have to go all
the way down in here, might be 3 delta t.

845
00:46:35,770 --> 00:46:39,130
I'm just making up t values here, whatever
that time is, right?

846
00:46:41,010 --> 00:46:43,910
That's what these things are.
So it's in main memory, you try to

847
00:46:43,910 --> 00:46:47,030
fetch it, you know,
it goes back over here.

848
00:46:47,230 --> 00:46:49,790
But the truth is
like in most computers, like

849
00:46:49,790 --> 00:46:53,150
we have in our laptops
here, our servers, like this

850
00:46:53,150 --> 00:46:57,190
thing's here, you actually can't
control the caches. You can't

851
00:46:57,190 --> 00:46:59,650
control how they get updated.
That's the hardware doing that.

852
00:47:00,010 --> 00:47:04,290
Now, there are some like
cutting edge types of devices

853
00:47:04,290 --> 00:47:08,750
that you can buy that
you can set those things.

854
00:47:10,470 --> 00:47:13,530
But for 99% of the rest of us,
you don't want to

855
00:47:13,530 --> 00:47:15,790
be screwing with that. You
just say, I want the computer to work.

856
00:47:16,830 --> 00:47:27,130
I'm assuming you're doing
it in a good way.

857
00:47:27,130 --> 00:47:29,770
It is always going to be doing one
particular type of operation

858
00:47:29,770 --> 00:47:33,710
and that doesn't benefit
from this policy. Then you might want to

859
00:47:33,710 --> 00:47:35,990
have a specialized device
that you can control.

860
00:47:37,070 --> 00:47:38,470
But remember, these
computers, they're what they

861
00:47:38,470 --> 00:47:42,750
call general purpose
computers. They're supposed to

862
00:47:42,750 --> 00:47:46,350
run anything, right? That means they don't
necessarily do great at

863
00:47:46,350 --> 00:47:47,350
running any one thing.

864
00:47:47,710 --> 00:47:50,490
Because, you know, if you've
only got one thing you got

865
00:47:50,490 --> 00:47:52,470
to do, you can build
a circuit and it does it

866
00:47:52,470 --> 00:47:54,990
thousands of times faster than
the computer does it. But that

867
00:47:54,990 --> 00:47:58,210
circuit can only do that one
thing. It can't do arbitrary things.

868
00:47:59,210 --> 00:48:03,810
All right. Now, we got all these caches
here, right? So we

869
00:48:03,810 --> 00:48:05,730
got some sort of variable
x over here. What

870
00:48:05,730 --> 00:48:10,530
about if this array executes
x? So it grabs x, it comes in here.

871
00:48:10,750 --> 00:48:12,730
I'm just going to imagine,
like, what about if x is

872
00:48:12,730 --> 00:48:16,310
in here and x is in
here? And then now this thread

873
00:48:16,310 --> 00:48:23,550
tries to access x. Now,
imagine it was 7, 7, 7,

874
00:48:23,770 --> 00:48:28,030
7, and this goes to access
x and it's like, okay, cool.

875
00:48:28,030 --> 00:48:29,970
I didn't find it here.
I didn't find it here.

876
00:48:30,090 --> 00:48:34,330
But, oh, I did find it there. It's a 7.
So I'm going to go put, you know, my x

877
00:48:34,330 --> 00:48:37,290
is 7 and x is 7 in here. And let's
say it changes into 8.

878
00:48:38,930 --> 00:48:42,210
Wait a minute now. You've
got a problem here because

879
00:48:42,210 --> 00:48:46,790
you've got x in multiple
locations strung out all throughout

880
00:48:46,790 --> 00:48:49,590
the memory hierarchy and they
don't all have the same

881
00:48:49,590 --> 00:48:50,990
value now. You see that?

882
00:48:51,670 --> 00:48:55,190
Like, if you go and
say that this is 8, well,

883
00:48:55,330 --> 00:48:58,230
wait a minute. If this guy
is accessing x, he still thinks

884
00:48:58,230 --> 00:49:01,890
it's 7. This guy thinks
it's 8. They don't even have

885
00:49:01,890 --> 00:49:04,410
a clear picture of it. I
mean, this happens in databases, right?

886
00:49:04,530 --> 00:49:07,750
Like, if one user tries
to modify a value in

887
00:49:07,750 --> 00:49:10,230
a database and it's time
that another user tries to

888
00:49:10,230 --> 00:49:13,850
modify a database, what does
the database typically do, not

889
00:49:13,850 --> 00:49:17,470
always, but typically try to
do to keep that from happening?

890
00:49:20,190 --> 00:49:26,480
Databases have these properties called
the ACID properties, right? What is

891
00:49:26,480 --> 00:49:33,900
it? Atomicity, concurrency, durability. I
don't remember all the various properties.

892
00:49:34,160 --> 00:49:35,740
That was the other course
I didn't want to teach when

893
00:49:35,740 --> 00:49:39,280
I came here. Only wanted to
teach you one time, thank goodness.

894
00:49:40,780 --> 00:49:43,640
My point of it is,
you typically lock a value,

895
00:49:43,720 --> 00:49:47,540
right? It's transactional based. So
if a person gets their transaction

896
00:49:47,540 --> 00:49:50,960
in a database first, this
other person is an atomic

897
00:49:50,960 --> 00:49:55,640
operation, atomicity. If everything goes
and says x is equal to

898
00:49:55,640 --> 00:49:58,180
10 and you're shoving 10
into a database where x

899
00:49:58,180 --> 00:50:01,220
is at, if somebody else
tries to modify x, it's going

900
00:50:01,220 --> 00:50:03,320
to stop and it's going
to finish this thing right

901
00:50:03,320 --> 00:50:05,480
here and then it's going
to do the other one, right?

902
00:50:06,220 --> 00:50:12,520
Now, who issued their
database changed first? Is

903
00:50:12,520 --> 00:50:15,020
it guaranteed that whoever
issued it first is

904
00:50:15,020 --> 00:50:17,840
going to change it first and the other
guy's going to overwrite it on top of it?

905
00:50:18,360 --> 00:50:20,400
You know, there's a lot of issues here
that have to do

906
00:50:20,400 --> 00:50:24,680
with concurrent access to stuff.
Concurrent access to shared

907
00:50:24,680 --> 00:50:28,660
data. That's the same problem
here because this is

908
00:50:28,660 --> 00:50:31,480
memory. This is share, right?

909
00:50:31,820 --> 00:50:37,520
So if you go ahead, if everybody
reads this x, no big deal. Reading stuff

910
00:50:37,520 --> 00:50:41,000
doesn't change anything, right?
But modifying a value,

911
00:50:41,060 --> 00:50:47,500
that changes it. So you have to make
sure that you take some kind of policy

912
00:50:47,500 --> 00:50:50,760
that makes sure that
when things change, everybody

913
00:50:50,760 --> 00:50:52,660
becomes aware of that
change and they're not

914
00:50:52,660 --> 00:50:54,460
operating on an old version of the data.

915
00:50:55,840 --> 00:50:59,920
And that's what's this idea of
like this cache coherency issue. So

916
00:50:59,920 --> 00:51:03,260
coherency and ultimately referred to as
also there's a

917
00:51:03,260 --> 00:51:06,720
related subject called consistency.
So coherency, consistency,

918
00:51:07,540 --> 00:51:11,020
you know, you've
got this variable here and other people

919
00:51:11,020 --> 00:51:14,120
are, you know, got different values
to it. How can we fix it?

920
00:51:14,400 --> 00:51:18,220
So there's a thing called
a directory based

921
00:51:18,220 --> 00:51:25,280
cache coherency protocol,
so the directory and Snoopy cache

922
00:51:25,280 --> 00:51:28,740
coherency protocol. Snoopy
means, hey, there's

923
00:51:28,740 --> 00:51:33,180
a little hardware device over here
that's constantly looking at the stuff

924
00:51:33,180 --> 00:51:37,060
going across this bus and looking
at what variables are being changed.

925
00:51:38,100 --> 00:51:41,060
And it's looking and it
sees that if somebody changes

926
00:51:41,060 --> 00:51:44,620
it, because it's constantly looking,
it's like, oh, hold on, that

927
00:51:44,620 --> 00:51:47,980
thing just changed. So this
is not valid anymore. Let

928
00:51:47,980 --> 00:51:51,000
me let me go update
this thing. So it's constantly looking.

929
00:51:52,160 --> 00:51:57,060
There's directory based where there's an
actual directory that is maintained to do

930
00:51:57,060 --> 00:52:01,180
that same thing. Alright, this is
more important. Like, for example, if this

931
00:52:01,180 --> 00:52:03,520
interconnection network is
taking place across

932
00:52:03,520 --> 00:52:09,880
like a really slow network across a,
you know, multiple computers, which is

933
00:52:09,880 --> 00:52:11,700
why normally we don't worry about this.

934
00:52:11,800 --> 00:52:15,080
We don't try to have there to be what's
called distributed shared memory with

935
00:52:15,080 --> 00:52:17,360
the types of stuff we're
doing. Are there things

936
00:52:17,360 --> 00:52:21,900
like that where literally variables
are shared? There's an X

937
00:52:21,900 --> 00:52:24,740
on that computer in RAM
over there. That's the same X's in my RAM.

938
00:52:25,260 --> 00:52:28,780
Can you do that? Yes, you can do that sort
of thing. But then there has to be this

939
00:52:28,780 --> 00:52:32,820
same thing that globally keeps
track of this consistency stuff.

940
00:52:32,840 --> 00:52:36,880
The same kind of stuff that
distributed database service

941
00:52:36,880 --> 00:52:39,500
have to do the
same thing. It's got multiple clients that

942
00:52:39,500 --> 00:52:43,180
could be reading and writing the same
data at the same time. These same

943
00:52:43,180 --> 00:52:47,460
sorts of problems you have in say
225 and 425 here, these are the

944
00:52:47,460 --> 00:52:48,880
same problems you
have inside the computer.

945
00:52:49,520 --> 00:52:52,120
It's just that instead of it being like,
say, something that's being

946
00:52:52,120 --> 00:52:54,800
controlled via software, this
stuff being controlled via

947
00:52:54,800 --> 00:52:56,960
hardware, right? And it's
being done for us.

948
00:52:57,320 --> 00:52:58,560
We're not controlling it, right?

949
00:53:01,620 --> 00:53:04,640
So you got those same kind of problems
with concurrent access to

950
00:53:04,640 --> 00:53:09,240
stuff. Now there's different types
of parallelism. This class

951
00:53:09,240 --> 00:53:11,720
is called introduction to parallel
programming. What kind of

952
00:53:11,720 --> 00:53:12,940
parallelism are we talking about?

953
00:53:14,220 --> 00:53:17,640
Well, you can have parallelism
at the instruction level. This

954
00:53:17,640 --> 00:53:24,200
is often called ILP, instruction
level parallelism, right? That can

955
00:53:24,200 --> 00:53:28,920
happen by saying, hey, I
want to execute my instruction

956
00:53:28,920 --> 00:53:32,900
on a pipeline, which is
one type of instruction level parallelism.

957
00:53:33,400 --> 00:53:37,420
Or I want to issue literally more than one
instruction at exactly the

958
00:53:37,420 --> 00:53:41,640
same time. Now these are
both happening at the

959
00:53:41,640 --> 00:53:44,180
same time, but they're not
quite the same thing, right?

960
00:53:44,520 --> 00:53:45,480
Talk about this one later.

961
00:53:47,240 --> 00:53:50,920
I want you to think about the
height lining. And I think they're using

962
00:53:50,920 --> 00:53:54,160
the close example in here, which makes
sense because this is

963
00:53:54,160 --> 00:53:58,520
the example that's used
in chapter 5 of our textbook, which

964
00:53:58,520 --> 00:54:01,620
we don't ever get to in say 210.
But if you put it in 310,

965
00:54:02,020 --> 00:54:03,880
it starts with chapter 4 and then 5.

966
00:54:06,360 --> 00:54:11,300
Imagine you're at home, you're going to
wash your clothes. So you take your

967
00:54:11,300 --> 00:54:14,420
dirty clothes, you put it in the
washing machine. After that's

968
00:54:14,420 --> 00:54:17,080
done, then you put
it in the dryer. After that's done,

969
00:54:17,180 --> 00:54:19,440
you take them out and you fold them.
And then after that, say you put

970
00:54:19,440 --> 00:54:21,100
them back in the closet or the drawers.

971
00:54:22,320 --> 00:54:24,600
Look, you know, I'm
trying to imagine, like, maybe

972
00:54:24,600 --> 00:54:27,780
this took 30 minutes,
30 minutes, 30 minutes, you

973
00:54:27,780 --> 00:54:30,080
know, and you can figure out how long it
would take to do

974
00:54:30,080 --> 00:54:31,160
one load of clothes, right?

975
00:54:31,920 --> 00:54:34,780
But now, if you and
your siblings, say, are at

976
00:54:34,780 --> 00:54:38,600
the house, you could put
your load in here first, wash

977
00:54:38,600 --> 00:54:41,540
it. As soon as your
load gets to the dryer, the

978
00:54:41,540 --> 00:54:44,580
sibling can start using this,
resourcing at exactly the same time.

979
00:54:44,640 --> 00:54:50,160
Now, that means that there are two
different clothes washings going

980
00:54:50,160 --> 00:54:51,820
on at the same
time. They're in different

981
00:54:51,820 --> 00:54:56,480
stages of execution. One
is drying while the other one is washing.

982
00:54:57,400 --> 00:55:00,040
And as long as you got, say, two
pieces of equipment that

983
00:55:00,040 --> 00:55:02,580
are separated like this, you
can do it. And if you've got multiple

984
00:55:02,580 --> 00:55:04,940
human beings down here,
then you know what I'm

985
00:55:04,940 --> 00:55:06,660
saying? You could be,
like, folding one load

986
00:55:06,660 --> 00:55:09,220
of clothes while another
one's drying while another one's

987
00:55:09,220 --> 00:55:11,780
being washed. That's three
things going on at the

988
00:55:11,780 --> 00:55:13,560
same time. So instead
of it going like this,

989
00:55:14,660 --> 00:55:20,140
you're going to, you know, wash,
dry, fold. Then your sibling is

990
00:55:20,140 --> 00:55:25,420
going to do wash, dry, fold.
What could you do? You could start

991
00:55:25,420 --> 00:55:29,600
here and say, I'm going to
wash, dry, fold. But as soon as

992
00:55:29,600 --> 00:55:33,200
I start drying, the other person
can come in here and start washing.

993
00:55:34,720 --> 00:55:39,140
So now instead of it being that
it takes this long to complete two

994
00:55:39,140 --> 00:55:43,660
things, it only takes this long to
complete two things. The amount of time is

995
00:55:43,660 --> 00:55:47,560
now shorter. And this is not a
new concept. I mean,

996
00:55:47,840 --> 00:55:51,880
ever since the conveyor
belts were made on the first assembly

997
00:55:51,880 --> 00:55:54,580
line, that's what an
assembly line is, right?

998
00:55:55,080 --> 00:55:58,120
You got to roll parts
rolling now, and you add

999
00:55:58,120 --> 00:56:00,700
your part to it, it goes on to the next
station. You add your parts

1000
00:56:00,700 --> 00:56:02,260
to it at the same
time everybody else is adding

1001
00:56:02,260 --> 00:56:03,340
their parts to their things.

1002
00:56:04,500 --> 00:56:09,260
Pipeline around, ever since the Industrial
Revolution started from a mechanized way.

1003
00:56:10,680 --> 00:56:13,560
Does that make sense? You're just
asking your computer to do that.

1004
00:56:13,980 --> 00:56:17,740
Same sort of thing. Divide the
execution of an instruction into pieces

1005
00:56:17,740 --> 00:56:21,940
and then start working on an
instruction before the

1006
00:56:21,940 --> 00:56:23,060
previous one is finished.

1007
00:56:24,580 --> 00:56:28,500
Start working on the next load of
laundry before the previous

1008
00:56:28,500 --> 00:56:29,720
load has even finished.

1009
00:56:30,540 --> 00:56:34,260
And that's fine because normally you and
your siblings clothing

1010
00:56:34,260 --> 00:56:37,460
are completely independent of
each other. They don't depend on the

1011
00:56:37,460 --> 00:56:41,440
same thing, right? Not in a computer,
not in my. Like if I said

1012
00:56:41,440 --> 00:56:48,460
something like, x is equal to y
plus z, and then I came down

1013
00:56:48,460 --> 00:56:50,820
here and said that w plus equals x.

1014
00:56:52,280 --> 00:56:57,240
Wait a minute. The answer of
this instruction feeds into the next one.

1015
00:56:57,320 --> 00:57:00,600
These are not independent of each
other. That might be a problem because

1016
00:57:00,600 --> 00:57:03,820
I might not be able to
get an answer before the next instruction

1017
00:57:03,820 --> 00:57:07,260
starts, but if these two things
are independent, this

1018
00:57:07,260 --> 00:57:09,580
analogy here works perfectly.

1019
00:57:10,360 --> 00:57:13,960
Okay, basically, how does
that actually happen? That's another

1020
00:57:13,960 --> 00:57:17,620
thing. Let's take a
look at their example here.

1021
00:57:18,680 --> 00:57:24,160
Yeah, so that, oh, the
example on these notes, I

1022
00:57:24,160 --> 00:57:28,180
see Professor Hickman has these
things taking different amounts of time.

1023
00:57:29,000 --> 00:57:32,020
Washer takes 30 minutes. The driver
takes 40 minutes.

1024
00:57:32,680 --> 00:57:34,960
That's pretty realistic, right?
I find that the driver takes

1025
00:57:34,960 --> 00:57:39,020
longer than the washer. That's not great,
though, is it? They're not the

1026
00:57:39,020 --> 00:57:44,380
same because that means that the washing
machine is sitting idle for 10 minutes

1027
00:57:44,380 --> 00:57:47,440
before the net, the dryer load finishes.

1028
00:57:48,280 --> 00:57:51,140
So you are always,
your pipeline is always limited

1029
00:57:51,140 --> 00:57:54,260
to the weakest link, and in this case, the
dryer is the weakest

1030
00:57:54,260 --> 00:58:00,830
link. See that? And the
folding, I mean, you can

1031
00:58:00,830 --> 00:58:01,870
get that done pretty fast.

1032
00:58:03,130 --> 00:58:06,470
But then whoever's folding closed,
they're waiting there 20 minutes

1033
00:58:06,470 --> 00:58:09,630
because when this load comes
out of the dryer and they

1034
00:58:09,630 --> 00:58:12,210
come over here and works,
this is happening for 20

1035
00:58:12,210 --> 00:58:14,910
minutes while the next dryer
is working on the next load.

1036
00:58:14,910 --> 00:58:18,010
But then for the last
half of this 20 minutes, this

1037
00:58:18,010 --> 00:58:20,730
person's not doing anything. They're
sitting there idle. That's not great.

1038
00:58:21,510 --> 00:58:24,870
But that is, in fact, the way it is in the
computer or something set up. So

1039
00:58:24,870 --> 00:58:25,750
you have to think about it.

1040
00:58:26,710 --> 00:58:29,350
This parallelism via pipelining
has a lot of benefits,

1041
00:58:29,610 --> 00:58:33,230
but it also has a
lot of limitations, like not

1042
00:58:33,230 --> 00:58:36,250
every stage takes the
same amount of time. If

1043
00:58:36,250 --> 00:58:38,430
there's data
dependencies between instructions,

1044
00:58:38,630 --> 00:58:39,730
then that's a problem, too.

1045
00:58:42,490 --> 00:58:48,350
So they kind of show this
here, washing, drying,

1046
00:58:48,390 --> 00:58:51,110
folding, washing, drying, folding.
And this would be if you

1047
00:58:51,110 --> 00:58:54,810
had to finish this whole process before
the next one could start, before

1048
00:58:54,810 --> 00:58:57,590
the next one could start, before the
next one could start, it would take

1049
00:58:57,590 --> 00:58:59,210
this amount of time to do it.

1050
00:58:59,550 --> 00:59:02,910
But if you allow it to be
done in a pipeline fashion, then that

1051
00:59:02,910 --> 00:59:06,970
gets reduced by a heck of a
lot here, right? Because the fact that

1052
00:59:06,970 --> 00:59:10,590
this is happening at the same time
as that, that and that's happening at

1053
00:59:10,590 --> 00:59:14,150
the same time, you know, that, that
and that's happening at the same time.

1054
00:59:14,250 --> 00:59:16,370
So you get like a lot of
stuff happening at the same time. But now,

1055
00:59:16,510 --> 00:59:20,230
when you first start,
all the equipment's unused,

1056
00:59:20,310 --> 00:59:24,430
right, except for the
washing machine is used.

1057
00:59:25,250 --> 00:59:28,710
So those other two
things are sitting idle. The

1058
00:59:28,710 --> 00:59:30,970
next thing, the washing
machine and the dryer are

1059
00:59:30,970 --> 00:59:33,150
used, but the folder
person is still sitting there

1060
00:59:33,150 --> 00:59:38,090
not doing anything. Now,
initially, the, you know, this

1061
00:59:38,090 --> 00:59:40,110
might not be necessarily
a great diagram of the

1062
00:59:40,110 --> 00:59:41,350
way it's drawn out,
but you could imagine at

1063
00:59:41,350 --> 00:59:43,450
some point here, because
there's three stages, all three

1064
00:59:43,450 --> 00:59:45,170
stages would be in use at the same time.

1065
00:59:45,650 --> 00:59:48,010
But now, at the very
end, as it starts filtering

1066
00:59:48,010 --> 00:59:51,390
out at the end, you
also have this thing where

1067
00:59:51,390 --> 00:59:54,110
not everything is being used
at the same time, right?

1068
00:59:54,630 --> 00:59:59,170
Anytime something's sitting idle, that's
a, that's a source of inefficiency.

1069
01:00:01,070 --> 01:00:03,650
So when you have a
pipeline, at the very beginning,

1070
01:00:03,890 --> 01:00:07,010
when the pipeline, when you
first start a pipeline, that's called

1071
01:00:07,010 --> 01:00:09,930
the warm up phase. And
at the end, when the stuff

1072
01:00:09,930 --> 01:00:12,090
dribbles out at the end,
that's called the cool down phase.

1073
01:00:12,430 --> 01:00:14,530
But in the middle,
when the pipeline is full,

1074
01:00:14,850 --> 01:00:18,250
that's when it's rocking
it at full speed, right?

1075
01:00:20,490 --> 01:00:23,730
And generally, the warm up period is
very short compared to

1076
01:00:23,730 --> 01:00:24,710
the entire time, right?

1077
01:00:25,310 --> 01:00:27,310
Like, let's just say
that's a couple of nanoseconds,

1078
01:00:27,310 --> 01:00:30,050
but your program's running
for minutes. That's not a

1079
01:00:30,050 --> 01:00:32,590
big deal, right? It's
that little bit at the

1080
01:00:32,590 --> 01:00:34,150
beginning, and it's a
little bit at the end.

1081
01:00:34,590 --> 01:00:36,910
That warm up and cool down
doesn't affect it much. But with

1082
01:00:36,910 --> 01:00:40,290
a little example like this, does
it affect it? Yes, a lot, because

1083
01:00:40,290 --> 01:00:43,630
it represents a big fraction of
the overall amount of time, because

1084
01:00:43,630 --> 01:00:46,910
this thing only shows what is
this, four loads of laundry being done?

1085
01:00:47,230 --> 01:00:51,610
But if there were 100,000 loads of
laundry being done, at the very beginning,

1086
01:00:51,810 --> 01:00:54,470
at the very end, nobody would care
about that. That's just

1087
01:00:54,470 --> 01:00:56,670
noise at that point.

1088
01:00:57,330 --> 01:01:01,090
Your pipeline is
predominantly to determine how

1089
01:01:01,090 --> 01:01:06,670
well it's working after it's warmed up and
before it cools down, which is normally

1090
01:01:06,670 --> 01:01:09,110
not quite an understand
of its execution time.

1091
01:01:09,970 --> 01:01:15,410
But what can it be limited by? Data
dependencies among instructions, and

1092
01:01:15,410 --> 01:01:18,910
there's an imbalance in
the amount of time it takes for each

1093
01:01:18,910 --> 01:01:22,790
phase. Like here, the
dryer is the weakest link.

1094
01:01:23,470 --> 01:01:27,710
So your total proof of instructions,
like how many instructions per second you

1095
01:01:27,710 --> 01:01:30,790
can get done, is going to depend
on the one that takes the longest.

1096
01:01:33,180 --> 01:01:36,000
And they just go and show
this. Like, for example, there is a

1097
01:01:36,000 --> 01:01:39,560
part in the computer that adds floating
point numbers down. It's inside the ALU.

1098
01:01:40,160 --> 01:01:43,140
And when you're trying
to add two floating points

1099
01:01:43,140 --> 01:01:46,320
together, they're saying that
a pipelining example that involves

1100
01:01:46,320 --> 01:01:48,320
floating point numbers inside
that thing, you've got to

1101
01:01:48,320 --> 01:01:51,160
first fetch the things from
memory that are being added.

1102
01:01:51,940 --> 01:01:55,960
And then, with the way floating point
numbers are actually done in the computer,

1103
01:01:56,120 --> 01:02:00,220
which you probably haven't done before, it
actually has to do stuff where it looks

1104
01:02:00,220 --> 01:02:02,960
at the exponents first, and then it
has to do some shifting, and then

1105
01:02:02,960 --> 01:02:05,160
it adds, and then it normalizes, and
then it rounds, and

1106
01:02:05,160 --> 01:02:05,880
then it stores results.

1107
01:02:06,140 --> 01:02:10,240
So that pipeline might have like
seven stages here. So there's several,

1108
01:02:10,280 --> 01:02:13,420
seven little chunks of things that
could be happening at the same time.

1109
01:02:13,420 --> 01:02:16,780
So this previous pipeline,
it had three stages, wash,

1110
01:02:16,980 --> 01:02:20,580
dry, and fold. Here, this
thing got seven stages. So

1111
01:02:20,580 --> 01:02:25,200
inside, like a typical
Intel x86 computer, there might

1112
01:02:25,200 --> 01:02:27,940
be some pipelines that are
20 or 30 stages long.

1113
01:02:28,980 --> 01:02:31,180
Now, you might say,
well, why don't you just

1114
01:02:31,180 --> 01:02:34,300
make lower stages be gigantic?
Because that sounds better, right?

1115
01:02:35,320 --> 01:02:39,720
Yes, but the problem with dependencies
get worse and worse, the longer

1116
01:02:39,720 --> 01:02:44,340
and deeper the pipeline is. So
there's some sweet spot for pipeline link.

1117
01:02:47,350 --> 01:02:52,740
All right. They go and talk
more about pipelining here. I'd rather

1118
01:02:52,740 --> 01:02:55,220
move on to the next type
of parallelism that

1119
01:02:55,220 --> 01:02:56,220
they're talking about here.

1120
01:02:57,360 --> 01:02:59,840
But they do the same thing.
They show it in a loop, right?

1121
01:02:59,980 --> 01:03:02,040
They're like, hey, I'm going to
add a thousand

1122
01:03:02,040 --> 01:03:03,280
floating point numbers together.

1123
01:03:03,880 --> 01:03:06,660
So I'm going to add a thousand, so
maybe a thousand of

1124
01:03:06,660 --> 01:03:09,720
these things to dispatch. But
in one moment, there's

1125
01:03:09,720 --> 01:03:11,600
all of these things, all
of these stages are

1126
01:03:11,600 --> 01:03:12,700
happening at the same time.

1127
01:03:12,820 --> 01:03:14,760
You know what I'm saying? So like,
you know, across here,

1128
01:03:14,920 --> 01:03:18,260
this is happening. One's
in one stage, one's in another, one's in

1129
01:03:18,260 --> 01:03:20,500
another. So that's kind
of what's happening here.

1130
01:03:21,440 --> 01:03:24,420
Now, the other type of parallelism
that was called

1131
01:03:24,420 --> 01:03:28,020
instruction level parallelism. One
was, it was instruction level because we

1132
01:03:28,020 --> 01:03:30,820
were dispatching instructions
offset by one slot.

1133
01:03:32,020 --> 01:03:35,320
Here we're saying, no, actually,
I'm going to actually dispatch

1134
01:03:35,320 --> 01:03:39,740
two different ads at exactly
the same time. So like, before

1135
01:03:39,740 --> 01:03:43,120
it'd be like, let me do an ad, and then
let me do an ad

1136
01:03:43,120 --> 01:03:46,060
like this in stages. That's pipeline.

1137
01:03:46,440 --> 01:03:51,600
Here, multiple issue means I am literally
going to do an ad, and I'm

1138
01:03:51,600 --> 01:03:55,340
going to start the other ad at
exactly the same time as the first ad.

1139
01:03:58,020 --> 01:04:00,360
You might say, well, when
does that, how could you do

1140
01:04:00,360 --> 01:04:03,880
that? That would be like
saying, I'm going to wash two

1141
01:04:03,880 --> 01:04:06,400
loads of laundry at the
same time. The only way you

1142
01:04:06,400 --> 01:04:09,040
can do that is if
you have two washing machines, right?

1143
01:04:10,360 --> 01:04:13,480
Now, that pipeline, you only have
to have one copy of every

1144
01:04:13,480 --> 01:04:17,280
resource. You only got to have
one washer, one dryer, one folder, right?

1145
01:04:17,920 --> 01:04:20,040
But if you wanted to do
three loads of laundry at the

1146
01:04:20,040 --> 01:04:22,200
same time, you'd have to have
three washers, three

1147
01:04:22,200 --> 01:04:24,080
dryers, three folders, right?

1148
01:04:24,460 --> 01:04:26,420
That's what they're saying
here. You want to do

1149
01:04:26,420 --> 01:04:30,840
two ads at the exact
same time, like from say

1150
01:04:30,840 --> 01:04:33,660
210, you remember like, you
know, ad R1, R2, R3,

1151
01:04:34,000 --> 01:04:36,740
and you also want to do ad R5, R6, R7.

1152
01:04:36,920 --> 01:04:39,800
Then there has to be
two adders inside the ALU

1153
01:04:39,800 --> 01:04:42,960
that can do those two
ads at the same time.

1154
01:04:43,960 --> 01:04:46,320
So you can imagine that the
more you want to issue it at

1155
01:04:46,320 --> 01:04:50,880
the same time, the more copies you
have to have of every functional unit.

1156
01:04:52,120 --> 01:04:54,920
What about if I want
to do two multiplies at

1157
01:04:54,920 --> 01:04:57,820
the same time? Then I
got to have two multipliers.

1158
01:04:57,920 --> 01:04:59,680
But if I want to do
a combination of two ads and

1159
01:04:59,680 --> 01:05:01,740
two multipliers at the same time,
I got to have copies of both.

1160
01:05:02,260 --> 01:05:04,580
I can't even have copies of
however many things. At some point

1161
01:05:04,580 --> 01:05:09,100
you're like, you know, you got
too much stuff going on there.

1162
01:05:09,300 --> 01:05:12,080
So there's also, same thing, the
depth of the pipeline is going

1163
01:05:12,080 --> 01:05:15,000
to be limited. The width of
the multiple issues is called width.

1164
01:05:15,280 --> 01:05:18,900
How wide? This is like
say, you know, two at a

1165
01:05:18,900 --> 01:05:21,540
time. But what about you
can issue four at a time?

1166
01:05:22,260 --> 01:05:27,300
So two at a time, four
at a time. Well, now in

1167
01:05:27,300 --> 01:05:29,860
this, in this thing right here,
look at this, look at this code.

1168
01:05:30,100 --> 01:05:31,740
Listen, what is the
maximum number of things

1169
01:05:31,740 --> 01:05:33,580
you could actually do at the same time?

1170
01:05:33,840 --> 01:05:37,120
Let's look at this. You
got an array of memory X.

1171
01:05:37,880 --> 01:05:40,960
It has to be added
to another array of memory Y.

1172
01:05:40,960 --> 01:05:44,380
So we got X, we got Y, and that's
B. And it's just

1173
01:05:44,380 --> 01:05:46,300
doing an element-wise addition, right?

1174
01:05:46,620 --> 01:05:52,380
And this is C. So like that plus that
is going here. That

1175
01:05:52,380 --> 01:05:53,940
plus that is going there.

1176
01:05:54,380 --> 01:05:56,600
But none of those
additions have anything to

1177
01:05:56,600 --> 01:05:58,440
do with any of the other ones, right?

1178
01:05:58,740 --> 01:06:01,820
Like you could do every iteration
of this for loop at exactly

1179
01:06:01,820 --> 01:06:04,320
the same time you don't even
need a for loop, do you?

1180
01:06:06,240 --> 01:06:10,500
I could write a program that has I
hard-coded into every one

1181
01:06:10,500 --> 01:06:11,320
of these things here.

1182
01:06:11,800 --> 01:06:15,220
And it's like I could add this
at the same time that that's being added.

1183
01:06:15,380 --> 01:06:19,640
So for example, if I had two
adders and I had two sets of

1184
01:06:19,640 --> 01:06:21,720
registers, I could
literally do this instruction

1185
01:06:21,720 --> 01:06:23,360
and this instruction at the same time.

1186
01:06:23,440 --> 01:06:25,720
And if I could do two
at a time every time I

1187
01:06:25,720 --> 01:06:28,720
do it in the loop, instead
of this loop executing a thousand times,

1188
01:06:28,720 --> 01:06:32,100
this loop would only
have to execute 500 times

1189
01:06:32,100 --> 01:06:34,500
because it was doing
two instructions every time, right?

1190
01:06:34,640 --> 01:06:38,060
But to do that, I got
to have adder number one and

1191
01:06:38,060 --> 01:06:41,440
adder number two inside the ALU
to be able to do that.

1192
01:06:41,520 --> 01:06:43,280
And if I want to
do that with every combination of

1193
01:06:43,280 --> 01:06:47,200
instructions, I got to have replications
of all of that computer hardware.

1194
01:06:47,640 --> 01:06:49,700
Does that kind of
make sense? What's happening here?

1195
01:06:49,960 --> 01:06:51,800
You could do this, but
it's going to cost you that.

1196
01:06:51,900 --> 01:06:54,640
You could do this, but it's
going to cost you that, right?

1197
01:06:54,640 --> 01:06:57,900
Like, that's kind of the
way this is going here.

1198
01:07:00,100 --> 01:07:01,420
So those are these two things here.

1199
01:07:02,720 --> 01:07:04,620
Now, the difference between,
say, fine-grained,

1200
01:07:04,880 --> 01:07:07,460
coarse-grained, and simultaneous
multi-threading, I don't want us

1201
01:07:07,460 --> 01:07:08,600
to worry a whole lot.

1202
01:07:08,980 --> 01:07:11,420
I don't want us to get all raised
up talking about what

1203
01:07:11,420 --> 01:07:12,400
the difference of this is.

1204
01:07:13,540 --> 01:07:17,570
In fact, I don't think I want us
to talk about that at all right now.

1205
01:07:17,770 --> 01:07:21,090
But why don't we do some threading
first, and then we can go back and

1206
01:07:21,090 --> 01:07:23,110
look at it and be like, what kind
of threading was this that we just did?

1207
01:07:23,110 --> 01:07:26,090
And you've got to feel for it, because you
actually start things from writing

1208
01:07:26,090 --> 01:07:27,090
a program with it, right?

1209
01:07:27,670 --> 01:07:29,030
So we'll worry about that later.

1210
01:07:31,870 --> 01:07:35,850
Parallel hardware. Okay, this is
an important taxonomy, Flynn's taxonomy.

1211
01:07:37,130 --> 01:07:41,070
And this is not
a perfect taxonomy, because

1212
01:07:41,070 --> 01:07:43,530
there are things that
don't fit into this taxonomy.

1213
01:07:44,390 --> 01:07:47,070
But in general, you've
got these four things.

1214
01:07:49,130 --> 01:07:52,010
So it's single instruction, single data.

1215
01:07:52,790 --> 01:07:56,970
So you can do one instruction on one
piece of data, and that's how you do it.

1216
01:07:57,650 --> 01:08:02,090
Or you could have single instructions
happen on multiple pieces of data.

1217
01:08:03,030 --> 01:08:08,270
Like, for example, in that previous
example that we just gave, we had

1218
01:08:08,270 --> 01:08:11,610
an array, and we wanted to
have the array to be added together.

1219
01:08:12,790 --> 01:08:15,270
It was the smallest array you
could add really, like, that makes sense.

1220
01:08:16,450 --> 01:08:23,930
So imagine that what was in this
array was 1, 2, 3, 4, like this.

1221
01:08:24,510 --> 01:08:25,410
We're going to add it.

1222
01:08:27,050 --> 01:08:29,210
Well, now, what we're doing is add, right?

1223
01:08:30,490 --> 01:08:32,770
The stream of
instructions is, there's only

1224
01:08:32,770 --> 01:08:34,170
one thing I want to do in add.

1225
01:08:34,490 --> 01:08:39,270
But it's happening to this piece of data
at the same time as this piece of data.

1226
01:08:39,430 --> 01:08:42,410
So there's multiple streams
of data, but there's only

1227
01:08:42,410 --> 01:08:44,290
one instruction I may
be doing to it, right?

1228
01:08:45,830 --> 01:08:49,430
This thing over here,
multiple instructions, single data, we're

1229
01:08:49,430 --> 01:08:50,870
not going to worry
about that in this course.

1230
01:08:53,170 --> 01:08:56,430
And then finally, this one,
multiple instructions and multiple data.

1231
01:08:57,330 --> 01:09:00,170
Well, now, that's basically like the way
everything is on

1232
01:09:00,170 --> 01:09:01,229
our computer already, right?

1233
01:09:01,350 --> 01:09:04,170
Like, if you run Microsoft
Word on your computer, the

1234
01:09:04,170 --> 01:09:09,569
same thing as PowerPoint, Microsoft
Word has got, you know,

1235
01:09:09,810 --> 01:09:13,570
lots of different instructions that are
happening on different pieces of data.

1236
01:09:13,750 --> 01:09:15,910
At the same time
that PowerPoint is working on

1237
01:09:15,910 --> 01:09:17,830
lots of different instructions
on different pieces of data,

1238
01:09:17,950 --> 01:09:19,450
literally, they're in
two different processes.

1239
01:09:19,729 --> 01:09:20,870
They don't have anything
to do with each other,

1240
01:09:21,470 --> 01:09:23,090
except for, you know,
even better than each other.

1241
01:09:23,170 --> 01:09:26,950
But other than that, you know, that is
kind of like what

1242
01:09:26,950 --> 01:09:27,950
we've been doing all along,

1243
01:09:27,950 --> 01:09:31,069
except for Word and
PowerPoint aren't trying to

1244
01:09:31,069 --> 01:09:33,250
solve the same problem at the same time.

1245
01:09:33,950 --> 01:09:37,810
But what we're going to be trying
to do is use multiple instruction streams

1246
01:09:37,810 --> 01:09:42,130
and multiple data streams at the same
time to solve a single problem faster.

1247
01:09:42,710 --> 01:09:44,970
That's what parallelism we're
talking about here is.

1248
01:09:45,670 --> 01:09:47,770
Solve one problem in
a shorter period of time.

1249
01:09:48,230 --> 01:09:51,930
The scientist needs to do matrix
multiplication, and it took ten seconds.

1250
01:09:52,130 --> 01:09:53,830
Wouldn't it be better
if it took one second?

1251
01:09:54,890 --> 01:09:57,370
So that's kind of
what we're talking about here.

1252
01:09:58,730 --> 01:10:05,250
So, SYSD, SIMD, and MMD, those are the
two, those are the

1253
01:10:05,250 --> 01:10:06,070
three things that we did.

1254
01:10:06,070 --> 01:10:08,690
We're going to be talking
about inside of Flynn's Taxonomy.

1255
01:10:10,190 --> 01:10:12,590
And if you go back and look at the
history of the instructions

1256
01:10:12,590 --> 01:10:13,650
that are in your computers,

1257
01:10:13,830 --> 01:10:16,850
like in your AMD
or your silicon type processors

1258
01:10:16,850 --> 01:10:20,510
or your x86 or your
ARM or whatever you got,

1259
01:10:21,310 --> 01:10:23,730
there'll be some
specialized instructions in there

1260
01:10:23,730 --> 01:10:26,270
that will do
what's called vector instructions,

1261
01:10:26,690 --> 01:10:29,930
where it'll do the
same math operation, but

1262
01:10:29,930 --> 01:10:32,070
instead of on two
individual numbers at a time,

1263
01:10:32,250 --> 01:10:35,570
it'll do it on eight individual numbers at
one time, or sixteen

1264
01:10:35,570 --> 01:10:36,990
numbers at the same time.

1265
01:10:37,390 --> 01:10:38,570
That's what this is.

1266
01:10:40,690 --> 01:10:48,490
And that started back in like
mid to late nineties, I guess.

1267
01:10:48,650 --> 01:10:49,610
They started doing that.

1268
01:10:50,070 --> 01:10:54,430
That's a weird name storm back then
that actually had the word SIMD in it,

1269
01:10:54,450 --> 01:10:56,710
and of course it's the community
that might back us regular consumers,

1270
01:10:56,910 --> 01:10:57,990
and what the hell does that even mean?

1271
01:10:59,930 --> 01:11:00,890
They don't need to worry about it.

1272
01:11:00,910 --> 01:11:02,090
You probably don't even
think about it, right?

1273
01:11:02,090 --> 01:11:03,390
When you buy something
today, you don't worry

1274
01:11:03,390 --> 01:11:05,690
about what kind of
vector extensions the thing has,

1275
01:11:05,770 --> 01:11:10,830
unless you're running an application that
you wrote that needs those things,

1276
01:11:10,970 --> 01:11:13,210
that you better buy a
product that provides it, right?

1277
01:11:13,450 --> 01:11:16,270
Like that's nine times out
of ten, you're just like, whatever.

1278
01:11:16,910 --> 01:11:19,270
I can still compile a program.
I can still run it on it.

1279
01:11:19,310 --> 01:11:20,090
It just might be slower.

1280
01:11:21,090 --> 01:11:22,150
That's the only issue.

1281
01:11:23,570 --> 01:11:27,390
Now, that first chapter I
said we're going to do MPI,

1282
01:11:28,830 --> 01:11:30,910
that's going to be
this type of parallelism.

1283
01:11:31,970 --> 01:11:38,250
Okay, let's see, let's
not worry about this.

1284
01:11:38,610 --> 01:11:42,510
Okay, any time data is transmitted,

1285
01:11:42,630 --> 01:11:45,350
we're interested in how long it takes
to get the data to reach its destination.

1286
01:11:46,010 --> 01:11:47,530
We talked about that last time, right?

1287
01:11:48,070 --> 01:11:50,770
Like if we said the amount of time
it takes to transfer

1288
01:11:50,770 --> 01:11:52,150
some data across the network

1289
01:11:52,150 --> 01:11:54,990
is equal to the size
of the data that you have,

1290
01:11:55,190 --> 01:11:57,890
divided by the bandwidth,
plus the latency, right?

1291
01:11:58,430 --> 01:12:01,430
That's something like this.

1292
01:12:02,410 --> 01:12:07,810
Latency is the time it takes
for when the first byte is sent

1293
01:12:07,810 --> 01:12:09,490
to when the first byte is received.

1294
01:12:10,030 --> 01:12:11,030
That's the lambda, right?

1295
01:12:12,330 --> 01:12:14,150
But then after the first byte is received,

1296
01:12:14,450 --> 01:12:16,130
the rest of the bytes have to be received.

1297
01:12:16,610 --> 01:12:19,830
That's the additional time that it
takes is S divided by V.

1298
01:12:20,910 --> 01:12:21,590
You think about it.

1299
01:12:22,050 --> 01:12:25,730
Like, for example, if I throw
this phone at your face, say,

1300
01:12:26,510 --> 01:12:27,730
in that hypothetical world,

1301
01:12:28,270 --> 01:12:29,370
and we say how much of this phone,

1302
01:12:29,630 --> 01:12:31,350
let's say this is the
first inch of the phone,

1303
01:12:31,450 --> 01:12:33,110
second, third, fourth, or whatever, here,

1304
01:12:34,190 --> 01:12:34,770
that's the bandwidth.

1305
01:12:35,030 --> 01:12:36,430
How many inches per second is it applying?

1306
01:12:36,630 --> 01:12:38,950
But it still takes, say, two
seconds to get to your face.

1307
01:12:39,350 --> 01:12:43,090
And then after that, another,
however many, to go by it.

1308
01:12:43,130 --> 01:12:46,050
So the bandwidth has to do with how
long it takes to

1309
01:12:46,050 --> 01:12:47,090
transfer that entire payload,

1310
01:12:47,250 --> 01:12:49,570
but the latency takes is how
long it takes for that packet

1311
01:12:49,570 --> 01:12:51,130
to initially get from here to there.

1312
01:12:51,410 --> 01:12:52,830
But then after that
first package is received,

1313
01:12:53,130 --> 01:12:54,730
then the rest of the
file has to be received,

1314
01:12:54,730 --> 01:12:56,210
or the rest of the
message has to be received.

1315
01:12:56,390 --> 01:12:57,510
And that's where the bandwidth comes in.

1316
01:12:58,050 --> 01:13:01,310
That's why you want, if you've
got size divided

1317
01:13:01,310 --> 01:13:03,050
by bandwidth plus latency,

1318
01:13:03,590 --> 01:13:07,310
you want this number to be small
because you want the time to be small.

1319
01:13:07,490 --> 01:13:10,030
In order to make this
small, this needs to be small

1320
01:13:10,030 --> 01:13:11,390
and this needs to be small.

1321
01:13:11,490 --> 01:13:13,510
But for that to be
small, this needs to be big.

1322
01:13:14,150 --> 01:13:17,550
So if this goes to
infinity, this term goes to zero.

1323
01:13:17,670 --> 01:13:19,690
If this goes to zero, then
both of these things are zero.

1324
01:13:19,870 --> 01:13:21,910
The problem is, having your
case and meeting it, too,

1325
01:13:21,990 --> 01:13:24,050
something that's got a really
great latency at the same time

1326
01:13:24,050 --> 01:13:24,990
is a really great bandwidth.

1327
01:13:25,550 --> 01:13:27,530
Typically there are
diametrically opposed objectives,

1328
01:13:27,850 --> 01:13:30,050
and that's why these
networks that we're talking about,

1329
01:13:30,190 --> 01:13:33,070
like Infiniband and all
these like spirit specialized things

1330
01:13:33,070 --> 01:13:35,230
that Create Computer makes,
some of these areas network,

1331
01:13:35,370 --> 01:13:36,150
and all this kind of stuff,

1332
01:13:36,690 --> 01:13:39,690
it is like hundreds of thousands
of dollars, say, for like a switch.

1333
01:13:40,810 --> 01:13:42,050
It's not a set of thousands of dollars,

1334
01:13:42,110 --> 01:13:44,970
it's hundreds of thousands
of stuff because it's specialized.

1335
01:13:45,390 --> 01:13:47,590
There's only however many
super-dudes in the world, right?

1336
01:13:47,990 --> 01:13:48,690
We don't need that.

1337
01:13:48,790 --> 01:13:50,970
Coastal doesn't need that in
their data center downstairs, right?

1338
01:13:50,970 --> 01:13:54,950
It's got a typical,
you know, 10 gig ethernet,

1339
01:13:55,070 --> 01:13:56,730
or 40 gig ethernet might work, right?

1340
01:13:56,810 --> 01:13:58,210
You don't need all this other stuff.

1341
01:14:00,570 --> 01:14:01,950
So we've got five minutes left.

1342
01:14:02,090 --> 01:14:04,090
I want us to talk about what you
need to get done

1343
01:14:04,090 --> 01:14:05,990
between now and next time.

1344
01:14:07,730 --> 01:14:10,330
You need to get your access CI done.

1345
01:14:11,970 --> 01:14:13,670
Get that thing to you.

1346
01:14:14,510 --> 01:14:18,850
If you don't have the book,
somehow or another, like Pacheco Text,

1347
01:14:18,990 --> 01:14:22,530
you get it because that's
where any slides are coming from,

1348
01:14:22,650 --> 01:14:23,470
Pacheco Text.

1349
01:14:27,220 --> 01:14:34,440
Then we're going to be in a
position to start playing

1350
01:14:34,440 --> 01:14:35,320
around with some stuff.

1351
01:14:36,080 --> 01:14:36,740
Now here's the thing.

1352
01:14:38,240 --> 01:14:41,960
How many people in here
have a Windows computer, okay?

1353
01:14:42,280 --> 01:14:44,780
How many people have a Mac computer, okay?

1354
01:14:45,040 --> 01:14:46,920
How many people have
a Linux machine right here?

1355
01:14:48,120 --> 01:14:48,720
All right.

1356
01:14:49,060 --> 01:14:55,160
So if you're a Mac person, you
know, just right up front, you know,

1357
01:14:55,520 --> 01:14:57,820
you can open up a
terminal and start doing so.

1358
01:14:58,340 --> 01:15:01,100
If you're on Linux, of
course, you can do that.

1359
01:15:01,960 --> 01:15:06,180
And in Windows, you know, you've
got Windows subsystem for Linux too

1360
01:15:06,180 --> 01:15:07,540
and some other types of things.

1361
01:15:08,040 --> 01:15:11,340
So all this stuff that
we're getting ready to talk about,

1362
01:15:11,440 --> 01:15:15,060
at least preliminarily, to play
with some little tiny parallel programs,

1363
01:15:15,420 --> 01:15:20,440
we won't need to be running
on the CI project or Expanse

1364
01:15:20,440 --> 01:15:22,140
just to play with some tiny, right?

1365
01:15:23,100 --> 01:15:29,560
So it would be really good that,
you know, if you're a Mac person,

1366
01:15:30,220 --> 01:15:32,300
you know, start thinking about like
the fact that you're going to be

1367
01:15:32,300 --> 01:15:34,680
executing stuff probably in the
command line of the computer.

1368
01:15:35,240 --> 01:15:39,640
How do you install things from
the command line on your Mac, okay?

1369
01:15:40,380 --> 01:15:43,660
On your Mac, for example,
you want to install something

1370
01:15:43,660 --> 01:15:46,080
that's not already on your
computer at the command line.

1371
01:15:46,240 --> 01:15:47,520
There's some library you need.

1372
01:15:47,700 --> 01:15:49,000
There's some compiler you need.

1373
01:15:49,160 --> 01:15:50,360
There's some whatever you need.

1374
01:15:50,680 --> 01:15:51,740
You know, you need OpenMP.

1375
01:15:51,960 --> 01:15:52,900
You need MPI.

1376
01:15:53,180 --> 01:15:54,120
You need this or that.

1377
01:15:54,180 --> 01:15:54,840
How do you do it?

1378
01:15:55,620 --> 01:15:59,000
What's the package manager that
most people use on the Mac

1379
01:15:59,000 --> 01:16:00,440
to install things in the command line?

1380
01:16:01,460 --> 01:16:03,700
It's called BRU, okay?

1381
01:16:04,240 --> 01:16:05,020
What about in Linux?

1382
01:16:05,240 --> 01:16:05,600
What is it?

1383
01:16:05,740 --> 01:16:07,260
Well, it depends on what
flavor of Linux you've got.

1384
01:16:07,360 --> 01:16:08,800
You've got the package managers, right?

1385
01:16:09,820 --> 01:16:11,120
Those are the kind of things.

1386
01:16:11,220 --> 01:16:11,940
And what about in Windows?

1387
01:16:11,940 --> 01:16:15,960
Well, you could use those same
package managers inside a flavor of Linux

1388
01:16:15,960 --> 01:16:17,420
that came with your WSL.

1389
01:16:18,180 --> 01:16:20,380
So those, a lot of
people are in here in Windows.

1390
01:16:20,560 --> 01:16:23,480
How many of you in Windows
have run stuff in the command line

1391
01:16:23,480 --> 01:16:25,720
like I'm talking about
where it's in the WSL?

1392
01:16:27,360 --> 01:16:28,240
How many of you have not?

1393
01:16:29,820 --> 01:16:33,640
Okay, so if you've never
done that kind of stuff before,

1394
01:16:33,740 --> 01:16:34,520
you need to start reading.

1395
01:16:34,740 --> 01:16:37,340
Like, how do I run
this stuff on my computer?

1396
01:16:37,540 --> 01:16:39,000
Start Googling around about that.

1397
01:16:39,180 --> 01:16:40,780
This class is not about that.

1398
01:16:40,940 --> 01:16:42,480
Like, you've got the computer you've got.

1399
01:16:42,740 --> 01:16:45,600
They're all capable of running these
parallel programs from the command line.

1400
01:16:45,760 --> 01:16:49,700
Figure out how to get the command
line up so that we can run GCC

1401
01:16:49,700 --> 01:16:52,200
and we can run these various things.

1402
01:16:52,280 --> 01:16:54,000
And we're going to
have to install special stuff.

1403
01:16:54,600 --> 01:16:55,820
We're going to have to install NPI.

1404
01:16:56,100 --> 01:16:58,160
We're going to have
to install whatever, if

1405
01:16:58,160 --> 01:16:59,300
we want to do it on our computers.

1406
01:16:59,560 --> 01:17:01,300
And I say, if we want to.

1407
01:17:01,800 --> 01:17:04,280
There's nowhere in here that
you're going to be required

1408
01:17:04,280 --> 01:17:07,480
to run it on your computer,
because the stuff you turn in

1409
01:17:07,580 --> 01:17:10,400
has to work on expense, okay?

1410
01:17:10,900 --> 01:17:13,780
But do you constantly want to
be working on some remote thing

1411
01:17:13,780 --> 01:17:16,860
where every time you change something and
all this is on some remote thing?

1412
01:17:17,300 --> 01:17:17,920
Probably not.

1413
01:17:18,360 --> 01:17:20,180
Probably want to play with
it on your own computer.

1414
01:17:21,300 --> 01:17:25,120
And for the first several
things we do in here,

1415
01:17:25,240 --> 01:17:27,180
you'll run it on your computer
is all you need to do.

1416
01:17:27,680 --> 01:17:31,360
So I'm just encouraging you to figure out
how to get it to the command line

1417
01:17:31,360 --> 01:17:34,800
and do some basic stuff and
compile the C program using GCC.

1418
01:17:35,660 --> 01:17:36,340
I would say that.

1419
01:17:36,340 --> 01:17:42,540
If you can get a hello world, world.c,

1420
01:17:42,960 --> 01:17:46,320
at the command line on
your computer, GCC, and run,

1421
01:17:47,380 --> 01:17:51,100
then you're probably at a point where
we can start playing this stuff, okay?

1422
01:17:52,880 --> 01:17:56,320
So that's pretty much it.

1423
01:17:57,000 --> 01:17:58,440
So I hope everybody has a great day.

1424
01:18:00,160 --> 01:18:04,220
We're going to have a, we're going to do
one more thing when we come back in here

1425
01:18:06,060 --> 01:18:09,780
on Tuesday, and then we're going
to start with our first NPI program

1426
01:18:09,780 --> 01:18:11,680
and talking about NPI, okay?

1427
01:18:12,460 --> 01:18:27,980
Have a good day.

1428
01:18:28,460 --> 01:18:29,180
Yes, sir, you do the same.

1429
01:18:45,650 --> 01:18:46,810
Yes, sir, you do the same.

1430
01:18:50,940 --> 01:18:51,600
Thank you.

1431
01:18:51,960 --> 01:18:52,180
Yeah.

1432
01:18:52,560 --> 01:18:56,380
I still didn't see, like,
all that time you started playing.

1433
01:18:57,420 --> 01:18:57,520
Yeah.

1434
01:18:57,620 --> 01:18:58,460
It's going to be okay.

1435
01:18:58,700 --> 01:18:59,500
I promise you.

1436
01:18:59,700 --> 01:19:00,340
It's going to be all right.

1437
01:19:01,980 --> 01:19:06,240
Like, there are some students that haven't
even been entered at all in the system,

1438
01:19:07,720 --> 01:19:11,220
and it's my understanding that the person,

1439
01:19:11,880 --> 01:19:16,280
so imagine, like, when I put
in a request for the department,

1440
01:19:16,600 --> 01:19:19,800
the department puts a thing in,
the human resources puts a thing in,

1441
01:19:20,180 --> 01:19:22,860
and then as the
supervisor, I approve that thing,

1442
01:19:22,980 --> 01:19:24,780
and then it goes to a sequence of people.

1443
01:19:25,060 --> 01:19:28,080
Like, for example, in this case,
it's charging, say, like, an account.

1444
01:19:29,840 --> 01:19:32,940
That account is being
controlled by the research people,

1445
01:19:33,020 --> 01:19:34,060
so it goes to the research.

1446
01:19:34,240 --> 01:19:36,600
That person is sick, say, yesterday.

1447
01:19:36,820 --> 01:19:39,060
They don't get back until today,
so it literally doesn't go anywhere,

1448
01:19:39,160 --> 01:19:41,880
and then that person approves it,
then it goes to the college,

1449
01:19:42,080 --> 01:19:44,300
and then it goes to the provost
and the dean and all this stuff,

1450
01:19:44,380 --> 01:19:46,440
and it's like, everybody has
to sign off on it,

1451
01:19:46,460 --> 01:19:48,600
so it takes days if all those
people aren't sitting

1452
01:19:48,600 --> 01:19:49,420
right on their computer,

1453
01:19:49,920 --> 01:19:52,160
but don't worry, like, this
is going to totally be okay.

1454
01:19:52,360 --> 01:19:54,500
Like, either electronically
or after the fact,

1455
01:19:54,880 --> 01:19:57,280
you just have a piece of
paper, put your things on it,

1456
01:19:57,280 --> 01:19:59,100
and they go process it retroactively.

1457
01:19:59,920 --> 01:20:01,780
You know, like, say five weeks from now,

1458
01:20:01,880 --> 01:20:03,040
something blew up in the computer system,

1459
01:20:03,140 --> 01:20:04,560
it doesn't really happen in
a minute, but that's fine.

1460
01:20:04,660 --> 01:20:06,280
Last five weeks, you just do
it on a sheet of paper,

1461
01:20:06,880 --> 01:20:09,220
then payroll goes to put
it in there and fixes it.

1462
01:20:09,340 --> 01:20:10,500
It's just, hopefully we don't get to that.

1463
01:20:10,620 --> 01:20:12,960
It's just that for some reason, a lot
of the people that

1464
01:20:12,960 --> 01:20:14,040
are involved in this thing

1465
01:20:14,040 --> 01:20:17,820
have been sick at each stage,
or either on travel or whatever,

1466
01:20:17,920 --> 01:20:20,620
and there's only one person in each
of these places that

1467
01:20:20,620 --> 01:20:21,460
approve it or whatever,

1468
01:20:21,520 --> 01:20:22,960
so it's...

1469
01:20:22,960 --> 01:20:24,540
Okay, I should just keep track of my time.

1470
01:20:27,500 --> 01:20:30,000
Just keep track of it, and,
like, that's all you've got to do.

1471
01:20:30,500 --> 01:20:33,860
If it went, when the
thing comes to go one by,

1472
01:20:34,140 --> 01:20:36,700
if it goes back to the early of the 18th,

1473
01:20:36,920 --> 01:20:37,700
cool, we'll do it there.

1474
01:20:37,840 --> 01:20:40,740
If it doesn't, then we just go
do it on what's called paper form

1475
01:20:40,740 --> 01:20:42,400
and put it in there,
and, like, literally, it's like,

1476
01:20:42,420 --> 01:20:45,000
this date, this date, this
date, five hours, three hours,

1477
01:20:45,180 --> 01:20:46,600
two hours, one hour,
and just go like that,

1478
01:20:46,720 --> 01:20:48,040
and do it in the name form.

1479
01:20:48,340 --> 01:20:51,280
You know, unfortunately, you know, like,
that might mean a particular paycheck.

1480
01:20:51,280 --> 01:20:55,600
I have two papers, and instead of one,
it's just a little while to do it.

1481
01:20:55,800 --> 01:20:56,880
That's basically how it works.

1482
01:20:58,580 --> 01:20:59,660
Yeah, man, you do the same, dude.

1483
01:21:48,460 --> 01:21:49,480
What class is this?

1484
01:21:49,940 --> 01:21:54,250
I'm trying to search the site.

1485
01:21:55,410 --> 01:21:57,690
Okay, is that the 303?

1486
01:21:58,470 --> 01:21:58,630
Yeah.

1487
01:21:59,130 --> 01:21:59,650
Oh, okay.

1488
01:21:59,850 --> 01:22:00,570
Who's teaching that?

1489
01:22:02,390 --> 01:22:02,870
Okay, cool.

